{
  "address": "0x9117A83cDFf0f482A9aED461a83C88271b972a6E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "asset",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "selectorHash",
          "type": "bytes32"
        }
      ],
      "name": "LogAssetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "to",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "burnNonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "indexedTo",
          "type": "bytes"
        }
      ],
      "name": "LogBurn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "recipientAddress",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "recipientChain",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "recipientPayload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "burnNonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "recipientAddressIndexed",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "recipientChainIndexed",
          "type": "string"
        }
      ],
      "name": "LogBurnToChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sigHash",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "nHash",
          "type": "bytes32"
        }
      ],
      "name": "LogMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldPreviousGateway",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPreviousGateway",
          "type": "address"
        }
      ],
      "name": "LogPreviousGatewayUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldSignatureVerifier",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSignatureVerifier",
          "type": "address"
        }
      ],
      "name": "LogSignatureVerifierUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "LogTokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nextTokenOwner",
          "type": "address"
        }
      ],
      "name": "TokenOwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "asset_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "signatureVerifier_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "__GatewayStateManager_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "asset_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "signatureVerifier_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "__MintGateway_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "recipientAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "recipientChain",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "recipientPayload",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "_burnFromPreviousGateway",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "pHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "_mintFromPreviousGateway",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "recipient",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "recipient",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "recipientAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "recipientChain",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "recipientPayload",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnWithPayload",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAsset",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEventNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPreviousGateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSelectorHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSignatureVerifier",
      "outputs": [
        {
          "internalType": "contract IRenVMSignatureVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "pHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "status",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nextTokenOwner",
          "type": "address"
        }
      ],
      "name": "transferTokenOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "nextAsset",
          "type": "string"
        }
      ],
      "name": "updateAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPreviousGateway",
          "type": "address"
        }
      ],
      "name": "updatePreviousGateway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSignatureVerifier",
          "type": "address"
        }
      ],
      "name": "updateSignatureVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newToken",
          "type": "address"
        }
      ],
      "name": "updateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0861f743171027c4d85b97c82e481119ed5519b5487231ff72749abffd20d7aa",
  "receipt": {
    "to": "0x2222229fb3318A6375FA78fd299A9a42aC6A8fbF",
    "from": "0x1111538e6a1657a4cd58Be1CCc13Da0c979e0e5C",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "2017647",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7a400f2432afd0e0fb31b461a5f43fac564a27c0e0049964d1365494b7d4ef5e",
    "transactionHash": "0x0861f743171027c4d85b97c82e481119ed5519b5487231ff72749abffd20d7aa",
    "logs": [],
    "blockNumber": 14949415,
    "cumulativeGasUsed": "2431904",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "8aa905616a54650906d098a6e85d2e9d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"asset\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"selectorHash\",\"type\":\"bytes32\"}],\"name\":\"LogAssetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"burnNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"indexedTo\",\"type\":\"bytes\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recipientAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recipientChain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"recipientPayload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"burnNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"recipientAddressIndexed\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"recipientChainIndexed\",\"type\":\"string\"}],\"name\":\"LogBurnToChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sigHash\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nHash\",\"type\":\"bytes32\"}],\"name\":\"LogMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPreviousGateway\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPreviousGateway\",\"type\":\"address\"}],\"name\":\"LogPreviousGatewayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldSignatureVerifier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSignatureVerifier\",\"type\":\"address\"}],\"name\":\"LogSignatureVerifierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"LogTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nextTokenOwner\",\"type\":\"address\"}],\"name\":\"TokenOwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"asset_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signatureVerifier_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"__GatewayStateManager_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"asset_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signatureVerifier_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"__MintGateway_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"recipientAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recipientChain\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"recipientPayload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"_burnFromPreviousGateway\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"_mintFromPreviousGateway\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"recipient\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"recipientAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recipientChain\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"recipientPayload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnWithPayload\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAsset\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEventNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPreviousGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSelectorHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSignatureVerifier\",\"outputs\":[{\"internalType\":\"contract IRenVMSignatureVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextTokenOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nextAsset\",\"type\":\"string\"}],\"name\":\"updateAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPreviousGateway\",\"type\":\"address\"}],\"name\":\"updatePreviousGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSignatureVerifier\",\"type\":\"address\"}],\"name\":\"updateSignatureVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burnWithPayload(string,string,bytes,uint256)\":{\"params\":{\"amount\":\"The amount of the token being locked, in the asset's        smallest unit. (e.g. satoshis for BTC)\",\"recipientAddress\":\"The address to which the locked assets will be        minted to. The address should be a plain-text address, without        decoding to bytes first.\",\"recipientChain\":\"The target chain to which the assets are being        moved to.\",\"recipientPayload\":\"An optional payload to be passed to the        recipient chain along with the address.\"}},\"mint(bytes32,uint256,bytes32,bytes)\":{\"params\":{\"amount\":\"The amount of the token being minted, in its smallest        value. (e.g. satoshis for BTC).\",\"nHash\":\"(nonce hash) The hash of the nonce, amount and pHash.\",\"pHash\":\"(payload hash) The hash of the payload associated with the        mint.\",\"sig\":\"The signature of the hash of the following values:        (pHash, amount, recipient, nHash), signed by the mintAuthority.\"}},\"updateAsset(string)\":{\"params\":{\"nextAsset\":\"The new asset.\"}},\"updatePreviousGateway(address)\":{\"params\":{\"newPreviousGateway\":\"The new gateway contract's address.\"}},\"updateSignatureVerifier(address)\":{\"params\":{\"newSignatureVerifier\":\"The new verifier contract address.\"}},\"updateToken(address)\":{\"params\":{\"newToken\":\"The new ERC20 token contract's address.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(bytes,uint256)\":{\"notice\":\"Same as `burn` with the recipient parameter being `bytes` instead of a `string`. For backwards compatibility with the MintGatewayV2.\"},\"burn(string,uint256)\":{\"notice\":\"burn is a convenience function that is equivalent to calling         `burnWithPayload` with an empty payload and chain, releasing         the asset to the native chain.\"},\"burnWithPayload(string,string,bytes,uint256)\":{\"notice\":\"burnWithPayload allows minted assets to be released to their         native chain, or to another chain as specified by the chain and         payload parameters.         WARNING: Burning with invalid parameters can cause the funds to         become unrecoverable.\"},\"mint(bytes32,uint256,bytes32,bytes)\":{\"notice\":\"mint verifies a mint approval signature from RenVM and creates         tokens after taking a fee for the `_feeRecipient`.\"},\"owner()\":{\"notice\":\"The Gateway is controlled by the owner of the SignatureVerifier. This allows for the owner of every Gateway to be updated with a single update to the SignatureVerifier contract.\"},\"transferTokenOwnership(address)\":{\"notice\":\"Allow the owner to update the owner of the RenERC20 token.\"},\"updateAsset(string)\":{\"notice\":\"Allow the owner to update the asset.\"},\"updatePreviousGateway(address)\":{\"notice\":\"Allow the owner to update the previous gateway used for backwards compatibility.\"},\"updateSignatureVerifier(address)\":{\"notice\":\"Allow the owner to update the signature verifier contract.\"},\"updateToken(address)\":{\"notice\":\"Allow the owner to update the ERC20 token contract.\"}},\"notice\":\"MintGateway handles verifying mint and burn requests. A mintAuthority approves new assets to be minted by providing a digital signature. An owner of an asset can request for it to be burnt.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Gateways/MintGateway.sol\":\"MintGatewayV3\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x14351164423eade7f2dbac5ca9ab8aeded8694f3b2d7a9e0114a2b3b6558198d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xca2eb23a188f213d914fad982985d07e491dbc9960a387d4469bfce5c48911b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcbccf806d646bd9e2594650917208245d45998b887d5fc914de424247f5f9f9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x8ddea9f930f26e588ea606f44c90d2623560c908e38614a03a4ca78aea8f9202\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0x2bf89a0dae89f861c5e8013478e650e918d98d376e75393867ccec88b0bf2b90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d15d280d1f868f59a8264dc73f7ea8c51f10d78aac864b2f2ad29412d187ff5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"src/Gateways/MintGateway.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// solhint-disable-next-line\\npragma solidity ^0.8.0;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\nimport {RenAssetV2} from \\\"../RenAsset/RenAsset.sol\\\";\\nimport {GatewayStateV3, GatewayStateManagerV3} from \\\"./common/GatewayState.sol\\\";\\nimport {RenVMHashes} from \\\"./common/RenVMHashes.sol\\\";\\nimport {IMintGateway} from \\\"./interfaces/IMintGateway.sol\\\";\\nimport {StringV1} from \\\"../libraries/StringV1.sol\\\";\\nimport {CORRECT_SIGNATURE_RETURN_VALUE_} from \\\"./RenVMSignatureVerifier.sol\\\";\\n\\n/// MintGateway handles verifying mint and burn requests. A mintAuthority\\n/// approves new assets to be minted by providing a digital signature. An owner\\n/// of an asset can request for it to be burnt.\\ncontract MintGatewayV3 is Initializable, ContextUpgradeable, GatewayStateV3, GatewayStateManagerV3, IMintGateway {\\n    string public constant NAME = \\\"MintGateway\\\";\\n\\n    event TokenOwnershipTransferred(address indexed tokenAddress, address indexed nextTokenOwner);\\n\\n    // If these parameters are changed, RenAssetFactory must be updated as well.\\n    function __MintGateway_init(\\n        string calldata asset_,\\n        address signatureVerifier_,\\n        address token_\\n    ) external initializer {\\n        __Context_init();\\n        __GatewayStateManager_init(asset_, signatureVerifier_, token_);\\n    }\\n\\n    // Governance functions ////////////////////////////////////////////////////\\n\\n    /// @notice Allow the owner to update the owner of the RenERC20 token.\\n    function transferTokenOwnership(address nextTokenOwner) external onlySignatureVerifierOwner {\\n        require(AddressUpgradeable.isContract(nextTokenOwner), \\\"MintGateway: next token owner must be a contract\\\");\\n        require(nextTokenOwner != address(0x0), \\\"MintGateway: invalid next token owner\\\");\\n\\n        address token_ = getToken();\\n        RenAssetV2(token_).transferOwnership(address(nextTokenOwner));\\n\\n        emit TokenOwnershipTransferred(token_, nextTokenOwner);\\n    }\\n\\n    // PUBLIC FUNCTIONS ////////////////////////////////////////////////////////\\n\\n    /// @notice mint verifies a mint approval signature from RenVM and creates\\n    ///         tokens after taking a fee for the `_feeRecipient`.\\n    ///\\n    /// @param pHash (payload hash) The hash of the payload associated with the\\n    ///        mint.\\n    /// @param amount The amount of the token being minted, in its smallest\\n    ///        value. (e.g. satoshis for BTC).\\n    /// @param nHash (nonce hash) The hash of the nonce, amount and pHash.\\n    /// @param sig The signature of the hash of the following values:\\n    ///        (pHash, amount, recipient, nHash), signed by the mintAuthority.\\n    function mint(\\n        bytes32 pHash,\\n        uint256 amount,\\n        bytes32 nHash,\\n        bytes calldata sig\\n    ) external override returns (uint256) {\\n        return _mint(pHash, amount, nHash, sig, _msgSender());\\n    }\\n\\n    /// @notice burnWithPayload allows minted assets to be released to their\\n    ///         native chain, or to another chain as specified by the chain and\\n    ///         payload parameters.\\n    ///         WARNING: Burning with invalid parameters can cause the funds to\\n    ///         become unrecoverable.\\n    ///\\n    /// @param recipientAddress The address to which the locked assets will be\\n    ///        minted to. The address should be a plain-text address, without\\n    ///        decoding to bytes first.\\n    /// @param recipientChain The target chain to which the assets are being\\n    ///        moved to.\\n    /// @param recipientPayload An optional payload to be passed to the\\n    ///        recipient chain along with the address.\\n    /// @param amount The amount of the token being locked, in the asset's\\n    ///        smallest unit. (e.g. satoshis for BTC)\\n    function burnWithPayload(\\n        string calldata recipientAddress,\\n        string calldata recipientChain,\\n        bytes calldata recipientPayload,\\n        uint256 amount\\n    ) external override returns (uint256) {\\n        return _burnWithPayload(recipientAddress, recipientChain, recipientPayload, amount, _msgSender());\\n    }\\n\\n    /// @notice burn is a convenience function that is equivalent to calling\\n    ///         `burnWithPayload` with an empty payload and chain, releasing\\n    ///         the asset to the native chain.\\n    function burn(string calldata recipient, uint256 amount) external virtual override returns (uint256) {\\n        return _burnWithPayload(recipient, \\\"\\\", \\\"\\\", amount, _msgSender());\\n    }\\n\\n    /// Same as `burn` with the recipient parameter being `bytes` instead of\\n    /// a `string`. For backwards compatibility with the MintGatewayV2.\\n    function burn(bytes calldata recipient, uint256 amount) external virtual override returns (uint256) {\\n        return _burnWithPayload(string(recipient), \\\"\\\", \\\"\\\", amount, _msgSender());\\n    }\\n\\n    function _mintFromPreviousGateway(\\n        bytes32 pHash,\\n        uint256 amount,\\n        bytes32 nHash,\\n        bytes calldata sig,\\n        address caller\\n    ) external onlyPreviousGateway returns (uint256) {\\n        return _mint(pHash, amount, nHash, sig, caller);\\n    }\\n\\n    function _burnFromPreviousGateway(\\n        string calldata recipientAddress,\\n        string calldata recipientChain,\\n        bytes calldata recipientPayload,\\n        uint256 amount,\\n        address caller\\n    ) external onlyPreviousGateway returns (uint256) {\\n        return _burnWithPayload(string(recipientAddress), recipientChain, recipientPayload, amount, caller);\\n    }\\n\\n    // INTERNAL FUNCTIONS //////////////////////////////////////////////////////\\n\\n    function _mint(\\n        bytes32 pHash,\\n        uint256 amount,\\n        bytes32 nHash,\\n        bytes memory sig,\\n        address recipient\\n    ) internal returns (uint256) {\\n        // Calculate the hash signed by RenVM. This binds the payload hash,\\n        // amount, recipient and nonce hash to the signature.\\n        bytes32 sigHash = RenVMHashes.calculateSigHash(pHash, amount, getSelectorHash(), recipient, nHash);\\n\\n        // Check that the signature hasn't been redeemed.\\n        require(!status(sigHash), \\\"MintGateway: signature already spent\\\");\\n\\n        // If the signature fails verification, throw an error.\\n        // `isValidSignature` must return an exact bytes4 value, to avoid\\n        // a contract mistakingly returning a truthy value without intending to.\\n        if (getSignatureVerifier().isValidSignature(sigHash, sig) != CORRECT_SIGNATURE_RETURN_VALUE_) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"MintGateway: invalid signature. phash: \\\",\\n                        StringsUpgradeable.toHexString(uint256(pHash), 32),\\n                        \\\", amount: \\\",\\n                        StringsUpgradeable.toString(amount),\\n                        \\\", shash\\\",\\n                        StringsUpgradeable.toHexString(uint256(getSelectorHash()), 32),\\n                        \\\", msg.sender: \\\",\\n                        StringsUpgradeable.toHexString(uint160(recipient), 20),\\n                        \\\", nhash: \\\",\\n                        StringsUpgradeable.toHexString(uint256(nHash), 32)\\n                    )\\n                )\\n            );\\n        }\\n\\n        // Update the status for the signature hash.\\n        _status[sigHash] = true;\\n\\n        // Mint the amount to the recipient.\\n        RenAssetV2(getToken()).mint(recipient, amount);\\n\\n        // Emit mint log. For backwards compatiblity reasons, the sigHash is\\n        // cast to a uint256.\\n        emit LogMint(recipient, amount, uint256(sigHash), nHash);\\n\\n        return amount;\\n    }\\n\\n    /// @notice burn destroys tokens after taking a fee for the `_feeRecipient`,\\n    ///         allowing the associated assets to be released on their native\\n    ///         chain.\\n    ///\\n    /// @param recipientAddress The address to which the locked assets will be\\n    ///        minted to. The address should be a plain-text address, without\\n    ///        decoding to bytes first.\\n    /// @param recipientChain The target chain to which the assets are being\\n    ///        moved to.\\n    /// @param recipientPayload An optional payload to be passed to the\\n    ///        recipient chain along with the address.\\n    /// @param amount The amount of the token being locked, in the asset's\\n    ///        smallest unit. (e.g. satoshis for BTC)\\n    function _burnWithPayload(\\n        string memory recipientAddress,\\n        string memory recipientChain,\\n        bytes memory recipientPayload,\\n        uint256 amount,\\n        address caller\\n    ) internal returns (uint256) {\\n        // The recipient must not be empty. Better validation is possible,\\n        // but would need to be customized for each destination ledger.\\n        require(StringV1.isNotEmpty(recipientAddress), \\\"MintGateway: to address is empty\\\");\\n\\n        // Burn the tokens. If the user doesn't have enough tokens, this will\\n        // throw.\\n        RenAssetV2(getToken()).burn(caller, amount);\\n\\n        uint256 burnNonce = getEventNonce();\\n\\n        // If a paylaod of recipient chain has been included, emit more detailed\\n        // event.\\n        if (StringV1.isNotEmpty(recipientChain) || recipientPayload.length > 0) {\\n            emit LogBurnToChain(\\n                recipientAddress,\\n                recipientChain,\\n                recipientPayload,\\n                amount,\\n                burnNonce,\\n                recipientAddress,\\n                recipientChain\\n            );\\n        } else {\\n            emit LogBurn(bytes(recipientAddress), amount, burnNonce, bytes(recipientAddress));\\n        }\\n\\n        _eventNonce = burnNonce + 1;\\n\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0x9766ff9c6d230dfe9e355668f13b13393dfaf8f6c7ab670de3e5797026611670\",\"license\":\"GPL-3.0\"},\"src/Gateways/RenVMSignatureVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// solhint-disable-next-line\\npragma solidity ^0.8.0;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {TransparentUpgradeableProxy} from \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\nimport {IERC1271} from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\n\\ninterface IRenVMSignatureVerifier is IERC1271 {\\n    // See IERC1271\\n\\n    function getChain() external view returns (string memory);\\n\\n    function getMintAuthority() external view returns (address);\\n}\\n\\ncontract RenVMSignatureVerifierStateV1 {\\n    string internal _chain;\\n    address internal _mintAuthority;\\n\\n    // Leave a gap so that storage values added in future upgrages don't corrupt\\n    // the storage of contracts that inherit from this contract.\\n    uint256[48] private __gap;\\n}\\n\\n// ERC-1271 uses 4-byte value instead of a boolean so that if a bug causes\\n// another function to be called (e.g. by proxy misconfiguration or fallbacks),\\n// a truthy value would not be interpreted as a successful check.\\n// See https://github.com/ethereum/EIPs/issues/1271#issuecomment-442328339.\\nbytes4 constant CORRECT_SIGNATURE_RETURN_VALUE_ = 0x1626ba7e;\\n\\ncontract RenVMSignatureVerifierV1 is\\n    Initializable,\\n    ContextUpgradeable,\\n    OwnableUpgradeable,\\n    RenVMSignatureVerifierStateV1,\\n    IERC1271,\\n    IRenVMSignatureVerifier\\n{\\n    string public constant NAME = \\\"RenVMSignatureVerifier\\\";\\n\\n    event LogMintAuthorityUpdated(address indexed mintAuthority);\\n\\n    // bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\")\\n    bytes4 public constant CORRECT_SIGNATURE_RETURN_VALUE = 0x1626ba7e; // CORRECT_SIGNATURE_RETURN_VALUE_\\n    bytes4 public constant INCORRECT_SIGNATURE_RETURN_VALUE = 0x000000;\\n\\n    function __RenVMSignatureVerifier_init(\\n        string calldata chain_,\\n        address mintAuthority_,\\n        address contractOwner\\n    ) external initializer {\\n        __Context_init();\\n        __Ownable_init();\\n        _chain = chain_;\\n        updateMintAuthority(mintAuthority_);\\n\\n        if (owner() != contractOwner) {\\n            transferOwnership(contractOwner);\\n        }\\n    }\\n\\n    function getChain() public view override returns (string memory) {\\n        return _chain;\\n    }\\n\\n    function getMintAuthority() public view override returns (address) {\\n        return _mintAuthority;\\n    }\\n\\n    // GOVERNANCE //////////////////////////////////////////////////////////////\\n\\n    modifier onlyOwnerOrMintAuthority() {\\n        require(_msgSender() == owner() || _msgSender() == getMintAuthority(), \\\"SignatureVerifier: not authorized\\\");\\n        _;\\n    }\\n\\n    /// @notice Allow the owner or mint authority to update the mint authority.\\n    ///\\n    /// @param nextMintAuthority The new mint authority address.\\n    function updateMintAuthority(address nextMintAuthority) public onlyOwnerOrMintAuthority {\\n        require(nextMintAuthority != address(0), \\\"SignatureVerifier: mintAuthority cannot be set to address zero\\\");\\n        _mintAuthority = nextMintAuthority;\\n        emit LogMintAuthorityUpdated(_mintAuthority);\\n    }\\n\\n    // PUBLIC //////////////////////////////////////////////////////////////////\\n\\n    /// @notice verifySignature checks the the provided signature matches the\\n    /// provided parameters. Returns a 4-byte value as defined by ERC1271.\\n    function isValidSignature(bytes32 sigHash, bytes calldata signature) external view override returns (bytes4) {\\n        address mintAuthority_ = getMintAuthority();\\n        require(mintAuthority_ != address(0x0), \\\"SignatureVerifier: mintAuthority not initialized\\\");\\n        if (mintAuthority_ == ECDSA.recover(sigHash, signature)) {\\n            return CORRECT_SIGNATURE_RETURN_VALUE;\\n        } else {\\n            return INCORRECT_SIGNATURE_RETURN_VALUE;\\n        }\\n    }\\n}\\n\\ncontract RenVMSignatureVerifierProxy is TransparentUpgradeableProxy {\\n    constructor(\\n        address logic,\\n        address admin,\\n        bytes memory data\\n    ) payable TransparentUpgradeableProxy(logic, admin, data) {}\\n}\\n\",\"keccak256\":\"0xb48bccdfc6d6a2ace4a6e2ef23c994c1252e2966cdd3b66ca577a443aad3fbaf\",\"license\":\"GPL-3.0\"},\"src/Gateways/common/GatewayState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// solhint-disable-next-line\\npragma solidity ^0.8.0;\\n\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport {IRenVMSignatureVerifier} from \\\"../RenVMSignatureVerifier.sol\\\";\\nimport {StringV1} from \\\"../../libraries/StringV1.sol\\\";\\nimport {RenVMHashes} from \\\"./RenVMHashes.sol\\\";\\n\\nabstract contract GatewayStateV3 {\\n    // Selector hash details.\\n    string internal _asset;\\n    bytes32 internal _selectorHash;\\n\\n    /// @notice Each signature can only be seen once.\\n    mapping(bytes32 => bool) internal _status;\\n\\n    /// @notice Each Gateway is tied to a specific asset.\\n    address internal _token;\\n\\n    IRenVMSignatureVerifier internal _signatureVerifier;\\n\\n    address internal _previousGateway;\\n\\n    uint256 internal _eventNonce;\\n\\n    // Leave a gap so that storage values added in future upgrages don't corrupt\\n    // the storage of contracts that inherit from this contract.\\n    uint256[43] private __gap;\\n}\\n\\nabstract contract GatewayStateManagerV3 is Initializable, ContextUpgradeable, GatewayStateV3 {\\n    event LogAssetUpdated(string asset, bytes32 indexed selectorHash);\\n    event LogTokenUpdated(address indexed token);\\n    event LogSignatureVerifierUpdated(address indexed oldSignatureVerifier, address indexed newSignatureVerifier);\\n    event LogPreviousGatewayUpdated(address indexed oldPreviousGateway, address indexed newPreviousGateway);\\n\\n    function __GatewayStateManager_init(\\n        string calldata asset_,\\n        address signatureVerifier_,\\n        address token_\\n    ) public initializer {\\n        __Context_init();\\n        _updateSignatureVerifier(signatureVerifier_);\\n        _updateAsset(asset_);\\n        _updateToken(token_);\\n    }\\n\\n    // GETTERS /////////////////////////////////////////////////////////////////\\n\\n    function getAsset() public view returns (string memory) {\\n        return _asset;\\n    }\\n\\n    function getSelectorHash() public view returns (bytes32) {\\n        require(_selectorHash != bytes32(0x0), \\\"Gateway: not initialized\\\");\\n        return _selectorHash;\\n    }\\n\\n    function getToken() public view returns (address) {\\n        return _token;\\n    }\\n\\n    function getSignatureVerifier() public view returns (IRenVMSignatureVerifier) {\\n        return _signatureVerifier;\\n    }\\n\\n    function getPreviousGateway() public view returns (address) {\\n        return _previousGateway;\\n    }\\n\\n    function getEventNonce() public view returns (uint256) {\\n        return _eventNonce;\\n    }\\n\\n    // Backwards compatibility.\\n    function token() public view returns (address) {\\n        return getToken();\\n    }\\n\\n    // GOVERNANCE //////////////////////////////////////////////////////////////\\n\\n    /// @notice The Gateway is controlled by the owner of the SignatureVerifier.\\n    /// This allows for the owner of every Gateway to be updated with a single\\n    /// update to the SignatureVerifier contract.\\n    function owner() public view returns (address) {\\n        return OwnableUpgradeable(address(getSignatureVerifier())).owner();\\n    }\\n\\n    modifier onlySignatureVerifierOwner() {\\n        require(owner() == _msgSender(), \\\"Gateway: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /// @notice Allow the owner to update the asset.\\n    ///\\n    /// @param nextAsset The new asset.\\n    function updateAsset(string calldata nextAsset) public onlySignatureVerifierOwner {\\n        _updateAsset(nextAsset);\\n    }\\n\\n    /// @notice Allow the owner to update the signature verifier contract.\\n    ///\\n    /// @param newSignatureVerifier The new verifier contract address.\\n    function updateSignatureVerifier(address newSignatureVerifier) public onlySignatureVerifierOwner {\\n        _updateSignatureVerifier(newSignatureVerifier);\\n    }\\n\\n    /// @notice Allow the owner to update the ERC20 token contract.\\n    ///\\n    /// @param newToken The new ERC20 token contract's address.\\n    function updateToken(address newToken) public onlySignatureVerifierOwner {\\n        _updateToken(newToken);\\n    }\\n\\n    /// @notice Allow the owner to update the previous gateway used for\\n    /// backwards compatibility.\\n    ///\\n    /// @param newPreviousGateway The new gateway contract's address.\\n    function updatePreviousGateway(address newPreviousGateway) external onlySignatureVerifierOwner {\\n        require(address(newPreviousGateway) != address(0x0), \\\"Gateway: invalid address\\\");\\n        address oldPreviousGateway = _previousGateway;\\n        _previousGateway = newPreviousGateway;\\n        emit LogPreviousGatewayUpdated(oldPreviousGateway, newPreviousGateway);\\n    }\\n\\n    // PREVIOUS GATEWAY ////////////////////////////////////////////////////////\\n\\n    modifier onlyPreviousGateway() {\\n        address previousGateway_ = getPreviousGateway();\\n\\n        // If there's no previous gateway, the second require should also fail,\\n        // but this require will provide a more informative reason.\\n        require(previousGateway_ != address(0x0), \\\"Gateway: no previous gateway\\\");\\n\\n        require(_msgSender() == previousGateway_, \\\"Gateway: not authorized\\\");\\n        _;\\n    }\\n\\n    function status(bytes32 hash) public view returns (bool) {\\n        if (_status[hash]) {\\n            return true;\\n        }\\n\\n        address previousGateway_ = getPreviousGateway();\\n        if (previousGateway_ != address(0x0)) {\\n            return GatewayStateManagerV3(previousGateway_).status(hash);\\n        }\\n\\n        return false;\\n    }\\n\\n    // INTERNAL ////////////////////////////////////////////////////////////////\\n\\n    /// @notice Allow the owner to update the asset.\\n    ///\\n    /// @param nextAsset The new asset.\\n    function _updateAsset(string calldata nextAsset) internal {\\n        require(StringV1.isValidString(nextAsset), \\\"Gateway: invalid asset\\\");\\n\\n        _asset = nextAsset;\\n\\n        bytes32 newSelectorHash = RenVMHashes.calculateSelectorHash(nextAsset, getSignatureVerifier().getChain());\\n        _selectorHash = newSelectorHash;\\n        emit LogAssetUpdated(nextAsset, newSelectorHash);\\n    }\\n\\n    /// @notice Allow the owner to update the signature verifier contract.\\n    ///\\n    /// @param newSignatureVerifier The new verifier contract address.\\n    function _updateSignatureVerifier(address newSignatureVerifier) internal {\\n        require(address(newSignatureVerifier) != address(0x0), \\\"Gateway: invalid signature verifier\\\");\\n        address oldSignatureVerifier = address(_signatureVerifier);\\n        _signatureVerifier = IRenVMSignatureVerifier(newSignatureVerifier);\\n        emit LogSignatureVerifierUpdated(oldSignatureVerifier, newSignatureVerifier);\\n    }\\n\\n    /// @notice Allow the owner to update the ERC20 token contract.\\n    ///\\n    /// @param newToken The new ERC20 token contract's address.\\n    function _updateToken(address newToken) internal {\\n        require(address(newToken) != address(0x0), \\\"Gateway: invalid token\\\");\\n        _token = newToken;\\n        emit LogTokenUpdated(newToken);\\n    }\\n}\\n\",\"keccak256\":\"0xf5e3c7e7924bcf41f0d88aa5feca8fe461a2a4e11208e49fae80d7ea0df502dd\",\"license\":\"GPL-3.0\"},\"src/Gateways/common/RenVMHashes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// solhint-disable-next-line\\npragma solidity ^0.8.0;\\n\\nlibrary RenVMHashes {\\n    /// @notice calculateSelectorHash calculates and hashes the selector hash,\\n    ///         which is formatted as `ASSET/toCHAIN`.\\n    function calculateSelectorHash(string memory assetSymbol, string memory chain) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(assetSymbol, \\\"/to\\\", chain));\\n    }\\n\\n    /// @notice calculateSigHash hashes the parameters to reconstruct the data\\n    ///         signed by RenVM.\\n    function calculateSigHash(\\n        bytes32 pHash,\\n        uint256 amount,\\n        bytes32 selectorHash,\\n        address to,\\n        bytes32 nHash\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(pHash, amount, selectorHash, to, nHash));\\n    }\\n}\\n\",\"keccak256\":\"0x60e5bae3f3fed5a07f2c391ab03e43474611784e7b590aa3dc4002b9c394c7f0\",\"license\":\"GPL-3.0\"},\"src/Gateways/interfaces/IMintGateway.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// solhint-disable-next-line\\npragma solidity ^0.8.0;\\n\\nabstract contract IMintGateway {\\n    /// @dev For backwards compatiblity reasons, the sigHash is cast to a\\n    /// uint256.\\n    event LogMint(address indexed to, uint256 amount, uint256 indexed sigHash, bytes32 indexed nHash);\\n\\n    /// @dev Once `LogBurnToChain` is enabled on mainnet, LogBurn may be\\n    /// replaced by LogBurnToChain with empty payload and chain fields.\\n    /// @dev For backwards compatibility, `to` is bytes instead of a string.\\n    event LogBurn(\\n        bytes to,\\n        uint256 amount,\\n        uint256 indexed burnNonce,\\n        // Indexed versions of previous parameters.\\n        bytes indexed indexedTo\\n    );\\n    event LogBurnToChain(\\n        string recipientAddress,\\n        string recipientChain,\\n        bytes recipientPayload,\\n        uint256 amount,\\n        uint256 indexed burnNonce,\\n        // Indexed versions of previous parameters.\\n        string indexed recipientAddressIndexed,\\n        string indexed recipientChainIndexed\\n    );\\n\\n    function mint(\\n        bytes32 pHash,\\n        uint256 amount,\\n        bytes32 nHash,\\n        bytes calldata sig\\n    ) external virtual returns (uint256);\\n\\n    function burnWithPayload(\\n        string calldata recipientAddress,\\n        string calldata recipientChain,\\n        bytes calldata recipientPayload,\\n        uint256 amount\\n    ) external virtual returns (uint256);\\n\\n    function burn(string calldata recipient, uint256 amount) external virtual returns (uint256);\\n\\n    function burn(bytes calldata recipient, uint256 amount) external virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1b62ed28ccd1be4caec60d67959a5024a71775f18a3f1839b3b6706081ba0a9\",\"license\":\"GPL-3.0\"},\"src/RenAsset/ERC20WithPermit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// solhint-disable-next-line\\npragma solidity ^0.8.0;\\n\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract ERC20WithPermitState {\\n    mapping(address => uint256) internal _nonces;\\n\\n    // If the token is redeployed, the version is increased to prevent a permit\\n    // signature being used on both token instances.\\n    string internal _version;\\n\\n    // --- EIP712 niceties ---\\n    bytes32 internal _domainSeparator;\\n\\n    // Leave a gap so that storage values added in future upgrages don't corrupt\\n    // the storage of contracts that inherit from this contract.\\n    uint256[47] private __gap;\\n}\\n\\n/// Taken from the DAI token (https://github.com/makerdao/dss/blob/c8d4c806691dacb903ff281b81f316bea974e4c7/src/dai.sol)\\n/// See also EIP-2612 (https://eips.ethereum.org/EIPS/eip-2612).\\ncontract ERC20WithPermit is Initializable, ERC20Upgradeable, ERC20WithPermitState {\\n    // PERMIT_TYPEHASH is the value returned from\\n    // keccak256(\\\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\\\")\\n    bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\\n\\n    function __ERC20WithPermit_init(\\n        uint256 chainId,\\n        string calldata version_,\\n        string calldata name_,\\n        string calldata symbol_\\n    ) public initializer {\\n        __ERC20_init(name_, symbol_);\\n        _version = version_;\\n        _domainSeparator = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name())),\\n                keccak256(bytes(version_)),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function nonces(address holder) public view returns (uint256) {\\n        return _nonces[holder];\\n    }\\n\\n    function version() external view returns (string memory) {\\n        return _version;\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        return _domainSeparator;\\n    }\\n\\n    // --- Approve by signature ---\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR(),\\n                keccak256(abi.encode(PERMIT_TYPEHASH, holder, spender, nonce, expiry, allowed))\\n            )\\n        );\\n\\n        require(holder != address(0), \\\"ERC20WithRate: address must not be 0x0\\\");\\n        require(holder == ecrecover(digest, v, r, s), \\\"ERC20WithRate: invalid signature\\\");\\n        require(expiry == 0 || block.timestamp <= expiry, \\\"ERC20WithRate: permit has expired\\\");\\n        require(nonce == nonces(holder), \\\"ERC20WithRate: invalid nonce\\\");\\n        _nonces[holder] = nonce + 1;\\n        uint256 amount = allowed ? uint256(int256(-1)) : 0;\\n\\n        // Approve\\n        _approve(holder, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf10101f97e4df3b9349a25b6f9e195cbac936c5175860679f65c6becc64c3873\",\"license\":\"GPL-3.0\"},\"src/RenAsset/RenAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// solhint-disable-next-line\\npragma solidity ^0.8.0;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\nimport {ERC20WithPermit} from \\\"./ERC20WithPermit.sol\\\";\\nimport {ERC20WithPermit} from \\\"./ERC20WithPermit.sol\\\";\\nimport {StringV1} from \\\"../libraries/StringV1.sol\\\";\\n\\nabstract contract RenAssetStateV2 {\\n    uint8 internal _decimals;\\n\\n    // Leave a gap so that storage values added in future upgrages don't corrupt\\n    // the storage of contracts that inherit from this contract.\\n    uint256[49] private __gap;\\n}\\n\\n/// RenAsset represents a digital asset that has been bridged by RenVM. It\\n/// exposes mint and burn functions that can only be called by it's associated\\n/// MintGateway contract.\\ncontract RenAssetV2 is Initializable, OwnableUpgradeable, ERC20Upgradeable, ERC20WithPermit, RenAssetStateV2 {\\n    string public constant NAME = \\\"RenAsset\\\";\\n\\n    // If these parameters are changed, RenAssetFactory must be updated as well.\\n    function __RenAsset_init(\\n        uint256 chainId,\\n        string calldata version_,\\n        string calldata name_,\\n        string calldata symbol_,\\n        uint8 decimals_,\\n        address contractOwner\\n    ) external initializer {\\n        require(StringV1.isValidString(version_), \\\"RenAsset: invalid version\\\");\\n        require(StringV1.isValidString(name_), \\\"RenAsset: invalid name\\\");\\n        require(StringV1.isValidString(symbol_), \\\"RenAsset: invalid symbol\\\");\\n\\n        __Ownable_init();\\n        __ERC20_init(name_, symbol_);\\n        __ERC20WithPermit_init(chainId, version_, name_, symbol_);\\n\\n        RenAssetStateV2._decimals = decimals_;\\n\\n        if (owner() != contractOwner) {\\n            transferOwnership(contractOwner);\\n        }\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return RenAssetStateV2._decimals;\\n    }\\n\\n    /// @notice mint can only be called by the tokens' associated Gateway\\n    /// contract. See Gateway's mint function instead.\\n    function mint(address to, uint256 amount) external onlyOwner {\\n        _mint(to, amount);\\n    }\\n\\n    /// @notice burn can only be called by the tokens' associated Gateway\\n    /// contract. See Gateway's burn functions instead.\\n    function burn(address from, uint256 amount) external onlyOwner {\\n        _burn(from, amount);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        // Disallow sending tokens to the ERC20 contract address - a common\\n        // mistake caused by the Ethereum transaction's `to` needing to be\\n        // the token's address.\\n        require(recipient != address(this), \\\"RenERC20: can't transfer to token address\\\");\\n        return super.transfer(recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        // Disallow sending tokens to the ERC20 contract address (see comment\\n        // in `transfer`).\\n        require(recipient != address(this), \\\"RenERC20: can't transfer to token address\\\");\\n        return super.transferFrom(sender, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x1c3a4a334803e3c6a09f820b82dd1d85c4e454e15b4f4f4748aa1281492def65\",\"license\":\"GPL-3.0\"},\"src/libraries/StringV1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// solhint-disable-next-line\\npragma solidity ^0.8.0;\\n\\n/// Updates String.isAlphanumeric to allow underscores.\\nlibrary StringV1 {\\n    /// Check that the string only contains alphanumeric characters (and\\n    /// underscores), to avoid UTF-8 characters that are indistinguishable from\\n    /// alphanumeric characters.\\n    function isAlphanumeric(string memory str) internal pure returns (bool) {\\n        for (uint256 i = 0; i < bytes(str).length; i++) {\\n            uint8 char = uint8(bytes(str)[i]);\\n            if (\\n                !((char >= 65 && char <= 90) || (char >= 97 && char <= 122) || (char >= 48 && char <= 57) || char == 95)\\n            ) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// Check that the string has at least one character.\\n    function isNotEmpty(string memory str) internal pure returns (bool) {\\n        return bytes(str).length > 0;\\n    }\\n\\n    /// Check that the string is not empty and only has alphanumeric characters.\\n    function isValidString(string memory str) internal pure returns (bool) {\\n        return isNotEmpty(str) && isAlphanumeric(str);\\n    }\\n}\\n\",\"keccak256\":\"0xa8c62d8c4de5911771ce606eb3514697900592e9abec5c3ecabea633d46946df\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612377806100206000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806352ad0d5e116100c3578063a3f4df7e1161007c578063a3f4df7e146102b4578063aed92d35146102de578063b48272cc146101ef578063c54216b4146102e6578063dbb82bd8146102f9578063fc0c546a1461030c57600080fd5b806352ad0d5e1461023b5780635667981b1461025e5780635c222bad146102715780637ad3def2146102865780638da5cb5b14610299578063976e7a3e146102a157600080fd5b80632e21384d116101155780632e21384d146101d6578063345763ad146101de57806338463cff146101ef5780633f1264ef14610202578063512e2718146102155780635266ba0c1461022857600080fd5b806309698130146101525780630cadbde01461017c578063159ab14d1461019157806321df0da7146101b257806321e6b53d146101c3575b600080fd5b6038546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b61018f61018a366004611c82565b610314565b005b6101a461019f366004611af6565b6103a1565b604051908152602001610173565b6036546001600160a01b031661015f565b61018f6101d1366004611a81565b6103f8565b6039546101a4565b6037546001600160a01b031661015f565b6101a46101fd366004611bf4565b6105b0565b6101a4610210366004611b57565b61061b565b6101a4610223366004611d8d565b61072a565b61018f610236366004611a81565b6108a2565b61024e610249366004611add565b610979565b6040519015158152602001610173565b61018f61026c366004611a81565b610a45565b610279610a80565b60405161017391906120e0565b61018f610294366004611a81565b610b12565b61015f610b4a565b6101a46102af366004611cea565b610bd3565b6102796040518060400160405280600b81526020016a4d696e744761746577617960a81b81525081565b6101a4610c82565b61018f6102f4366004611c40565b610cdb565b61018f610307366004611c82565b610d18565b61015f610d93565b600054610100900460ff168061032d575060005460ff16155b6103525760405162461bcd60e51b815260040161034990612173565b60405180910390fd5b600054610100900460ff16158015610374576000805461ffff19166101011790555b61037c610da7565b61038885858585610d18565b801561039a576000805461ff00191690555b5050505050565b60006103ee86868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103e99250610e1a915050565b610e1e565b9695505050505050565b33610401610b4a565b6001600160a01b0316146104275760405162461bcd60e51b81526004016103499061213e565b803b61048e5760405162461bcd60e51b815260206004820152603060248201527f4d696e74476174657761793a206e65787420746f6b656e206f776e6572206d7560448201526f1cdd08189948184818dbdb9d1c9858dd60821b6064820152608401610349565b6001600160a01b0381166104f25760405162461bcd60e51b815260206004820152602560248201527f4d696e74476174657761793a20696e76616c6964206e65787420746f6b656e2060448201526437bbb732b960d91b6064820152608401610349565b60006105066036546001600160a01b031690565b60405163f2fde38b60e01b81526001600160a01b0384811660048301529192509082169063f2fde38b90602401600060405180830381600087803b15801561054d57600080fd5b505af1158015610561573d6000803e3d6000fd5b50506040516001600160a01b038086169350841691507f0670e929e0da48f4446360abae5c94415b26a39a98993d2a69f1864d5130186c90600090a35050565b6037546001600160a01b031690565b600061061384848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020808201835283825282519081019092529181529093509150869050336110e5565b6110e5565b949350505050565b6000806106306038546001600160a01b031690565b90506001600160a01b0381166106885760405162461bcd60e51b815260206004820152601c60248201527f476174657761793a206e6f2070726576696f75732067617465776179000000006044820152606401610349565b336001600160a01b038216146106da5760405162461bcd60e51b815260206004820152601760248201527611d85d195dd85e4e881b9bdd08185d5d1a1bdc9a5e9959604a1b6044820152606401610349565b61071e88888888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250610e1e915050565b98975050505050505050565b60008061073f6038546001600160a01b031690565b90506001600160a01b0381166107975760405162461bcd60e51b815260206004820152601c60248201527f476174657761793a206e6f2070726576696f75732067617465776179000000006044820152606401610349565b336001600160a01b038216146107e95760405162461bcd60e51b815260206004820152601760248201527611d85d195dd85e4e881b9bdd08185d5d1a1bdc9a5e9959604a1b6044820152606401610349565b6108948a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b908190840183828082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a90819084018382808284376000920191909152508a92508991506110e59050565b9a9950505050505050505050565b336108ab610b4a565b6001600160a01b0316146108d15760405162461bcd60e51b81526004016103499061213e565b6001600160a01b0381166109275760405162461bcd60e51b815260206004820152601860248201527f476174657761793a20696e76616c6964206164647265737300000000000000006044820152606401610349565b603880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fd420320c6286dfd203f890abd5a2bbf75c64ef636ed72e192259fa1d133cd55b90600090a35050565b60008181526035602052604081205460ff161561099857506001919050565b60006109ac6038546001600160a01b031690565b90506001600160a01b03811615610a3c5760405163295686af60e11b8152600481018490526001600160a01b038216906352ad0d5e9060240160206040518083038186803b1580156109fd57600080fd5b505afa158015610a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a359190611abb565b9392505050565b50600092915050565b33610a4e610b4a565b6001600160a01b031614610a745760405162461bcd60e51b81526004016103499061213e565b610a7d816112ae565b50565b606060338054610a8f9061226a565b80601f0160208091040260200160405190810160405280929190818152602001828054610abb9061226a565b8015610b085780601f10610add57610100808354040283529160200191610b08565b820191906000526020600020905b815481529060010190602001808311610aeb57829003601f168201915b5050505050905090565b33610b1b610b4a565b6001600160a01b031614610b415760405162461bcd60e51b81526004016103499061213e565b610a7d81611362565b6000610b5e6037546001600160a01b031690565b6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9657600080fd5b505afa158015610baa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bce9190611a9e565b905090565b600061071e88888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a915089908190840183828082843760009201919091525050604080516020601f8b01819004810282018101909252898152925089915088908190840183828082843760009201919091525088925061060e9150610e1a9050565b603454600090610cd45760405162461bcd60e51b815260206004820152601860248201527f476174657761793a206e6f7420696e697469616c697a656400000000000000006044820152606401610349565b5060345490565b33610ce4610b4a565b6001600160a01b031614610d0a5760405162461bcd60e51b81526004016103499061213e565b610d1482826113fb565b5050565b600054610100900460ff1680610d31575060005460ff16155b610d4d5760405162461bcd60e51b815260040161034990612173565b600054610100900460ff16158015610d6f576000805461ffff19166101011790555b610d77610da7565b610d80836112ae565b610d8a85856113fb565b61038882611362565b6000610bce6036546001600160a01b031690565b600054610100900460ff1680610dc0575060005460ff16155b610ddc5760405162461bcd60e51b815260040161034990612173565b600054610100900460ff16158015610dfe576000805461ffff19166101011790555b610e06611592565b8015610a7d576000805461ff001916905550565b3390565b600080610e7a8787610e2e610c82565b604080516020808201959095528082019390935260608301919091526001600160a01b038716608083015260a08083018a90528151808403909101815260c09092019052805191012090565b9050610e8581610979565b15610ede5760405162461bcd60e51b8152602060048201526024808201527f4d696e74476174657761793a207369676e617475726520616c726561647920736044820152631c195b9d60e21b6064820152608401610349565b630b135d3f60e11b610ef86037546001600160a01b031690565b6001600160a01b0316631626ba7e83876040518363ffffffff1660e01b8152600401610f25929190612076565b60206040518083038186803b158015610f3d57600080fd5b505afa158015610f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f759190611bca565b6001600160e01b0319161461100357610f8f8760206115fc565b610f9887611798565b610faa610fa3610c82565b60206115fc565b610fbe866001600160a01b031660146115fc565b610fc98960206115fc565b604051602001610fdd959493929190611f77565b60408051601f198184030181529082905262461bcd60e51b8252610349916004016120e0565b6000818152603560205260409020805460ff1916600117905561102e6036546001600160a01b031690565b6040516340c10f1960e01b81526001600160a01b0385811660048301526024820189905291909116906340c10f1990604401600060405180830381600087803b15801561107a57600080fd5b505af115801561108e573d6000803e3d6000fd5b50505050848160001c846001600160a01b03167fa58ba939eb08dab7eaf8ad09c16e7405ee88e5153e15da62d5481296a9f727fa896040516110d291815260200190565b60405180910390a4509395945050505050565b60006110f18651151590565b61113d5760405162461bcd60e51b815260206004820181905260248201527f4d696e74476174657761793a20746f206164647265737320697320656d7074796044820152606401610349565b6036546001600160a01b0316604051632770a7eb60e21b81526001600160a01b038481166004830152602482018690529190911690639dc29fac90604401600060405180830381600087803b15801561119557600080fd5b505af11580156111a9573d6000803e3d6000fd5b5050505060006111b860395490565b90506111c48651151590565b806111d0575060008551115b1561124457856040516111e39190611f1d565b6040518091039020876040516111f99190611f1d565b6040518091039020827ff1e98bc6e5ee93b47362bddb133886a2b471c968633a462b824f57cdb4b36c528a8a8a8a60405161123794939291906120f3565b60405180910390a4611295565b866040516112529190611f1d565b6040518091039020817f1619fc95050ffb8c94c9077c82b3e1ebbf8d571b6234241c55ba0aaf40da019e898760405161128c92919061208f565b60405180910390a35b6112a08160016121c1565b603955509195945050505050565b6001600160a01b0381166113105760405162461bcd60e51b815260206004820152602360248201527f476174657761793a20696e76616c6964207369676e617475726520766572696660448201526234b2b960e91b6064820152608401610349565b603780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907ff7dbe6f0a40adabc688e64fce7060ca2f466fbf846227fb5e4e05305553bae5e90600090a35050565b6001600160a01b0381166113b15760405162461bcd60e51b815260206004820152601660248201527523b0ba32bbb0bc9d1034b73b30b634b2103a37b5b2b760511b6044820152606401610349565b603680546001600160a01b0319166001600160a01b0383169081179091556040517f02dec22a3d1e8f9cdc0c7cd17ecee187f635788c40755be0a72dcd86a05e564d90600090a250565b61143a82828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061189692505050565b61147f5760405162461bcd60e51b815260206004820152601660248201527511d85d195dd85e4e881a5b9d985b1a5908185cdcd95d60521b6044820152606401610349565b61148b6033838361199f565b50600061154a83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114d192506105a1915050565b6001600160a01b03166332e21ae76040518163ffffffff1660e01b815260040160006040518083038186803b15801561150957600080fd5b505afa15801561151d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115459190810190611e44565b6118b8565b905080603481905550807f2e7c1f9bcc3b09d8e05594ab5d17b6c9b15b24cd506c5212f051f22990d0813184846040516115859291906120b1565b60405180910390a2505050565b600054610100900460ff16806115ab575060005460ff16155b6115c75760405162461bcd60e51b815260040161034990612173565b600054610100900460ff16158015610e06576000805461ffff19166101011790558015610a7d576000805461ff001916905550565b6060600061160b8360026121ed565b6116169060026121c1565b67ffffffffffffffff81111561162e5761162e612316565b6040519080825280601f01601f191660200182016040528015611658576020820181803683370190505b509050600360fc1b8160008151811061167357611673612300565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106116a2576116a2612300565b60200101906001600160f81b031916908160001a90535060006116c68460026121ed565b6116d19060016121c1565b90505b6001811115611749576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061170557611705612300565b1a60f81b82828151811061171b5761171b612300565b60200101906001600160f81b031916908160001a90535060049490941c9361174281612253565b90506116d4565b508315610a355760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610349565b6060816117bc5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156117e657806117d0816122a5565b91506117df9050600a836121d9565b91506117c0565b60008167ffffffffffffffff81111561180157611801612316565b6040519080825280601f01601f19166020018201604052801561182b576020820181803683370190505b5090505b84156106135761184060018361220c565b915061184d600a866122c0565b6118589060306121c1565b60f81b81838151811061186d5761186d612300565b60200101906001600160f81b031916908160001a90535061188f600a866121d9565b945061182f565b60006118a28251151590565b80156118b257506118b2826118eb565b92915050565b600082826040516020016118cd929190611f39565b60405160208183030381529060405280519060200120905092915050565b6000805b825181101561199657600083828151811061190c5761190c612300565b016020015160f81c90506041811080159061192b5750605a8160ff1611155b80611949575060618160ff16101580156119495750607a8160ff1611155b80611967575060308160ff1610158015611967575060398160ff1611155b8061197557508060ff16605f145b611983575060009392505050565b508061198e816122a5565b9150506118ef565b50600192915050565b8280546119ab9061226a565b90600052602060002090601f0160209004810192826119cd5760008555611a13565b82601f106119e65782800160ff19823516178555611a13565b82800160010185558215611a13579182015b82811115611a135782358255916020019190600101906119f8565b50611a1f929150611a23565b5090565b5b80821115611a1f5760008155600101611a24565b60008083601f840112611a4a57600080fd5b50813567ffffffffffffffff811115611a6257600080fd5b602083019150836020828501011115611a7a57600080fd5b9250929050565b600060208284031215611a9357600080fd5b8135610a358161232c565b600060208284031215611ab057600080fd5b8151610a358161232c565b600060208284031215611acd57600080fd5b81518015158114610a3557600080fd5b600060208284031215611aef57600080fd5b5035919050565b600080600080600060808688031215611b0e57600080fd5b853594506020860135935060408601359250606086013567ffffffffffffffff811115611b3a57600080fd5b611b4688828901611a38565b969995985093965092949392505050565b60008060008060008060a08789031215611b7057600080fd5b863595506020870135945060408701359350606087013567ffffffffffffffff811115611b9c57600080fd5b611ba889828a01611a38565b9094509250506080870135611bbc8161232c565b809150509295509295509295565b600060208284031215611bdc57600080fd5b81516001600160e01b031981168114610a3557600080fd5b600080600060408486031215611c0957600080fd5b833567ffffffffffffffff811115611c2057600080fd5b611c2c86828701611a38565b909790965060209590950135949350505050565b60008060208385031215611c5357600080fd5b823567ffffffffffffffff811115611c6a57600080fd5b611c7685828601611a38565b90969095509350505050565b60008060008060608587031215611c9857600080fd5b843567ffffffffffffffff811115611caf57600080fd5b611cbb87828801611a38565b9095509350506020850135611ccf8161232c565b91506040850135611cdf8161232c565b939692955090935050565b60008060008060008060006080888a031215611d0557600080fd5b873567ffffffffffffffff80821115611d1d57600080fd5b611d298b838c01611a38565b909950975060208a0135915080821115611d4257600080fd5b611d4e8b838c01611a38565b909750955060408a0135915080821115611d6757600080fd5b50611d748a828b01611a38565b989b979a50959894979596606090950135949350505050565b60008060008060008060008060a0898b031215611da957600080fd5b883567ffffffffffffffff80821115611dc157600080fd5b611dcd8c838d01611a38565b909a50985060208b0135915080821115611de657600080fd5b611df28c838d01611a38565b909850965060408b0135915080821115611e0b57600080fd5b50611e188b828c01611a38565b909550935050606089013591506080890135611e338161232c565b809150509295985092959890939650565b600060208284031215611e5657600080fd5b815167ffffffffffffffff80821115611e6e57600080fd5b818401915084601f830112611e8257600080fd5b815181811115611e9457611e94612316565b604051601f8201601f19908116603f01168101908382118183101715611ebc57611ebc612316565b81604052828152876020848701011115611ed557600080fd5b611ee6836020830160208801612223565b979650505050505050565b60008151808452611f09816020860160208601612223565b601f01601f19169290920160200192915050565b60008251611f2f818460208701612223565b9190910192915050565b60008351611f4b818460208801612223565b622f746f60e81b9083019081528351611f6b816003840160208801612223565b01600301949350505050565b7f4d696e74476174657761793a20696e76616c6964207369676e61747572652e20815260006020660383430b9b41d160cd1b818401528751611fbf8160278601848c01612223565b690161030b6b7bab73a1d160b51b6027918501918201528751611fe88160318401858c01612223565b6605840e6d0c2e6d60cb1b60319290910191820152865161200f8160388401858b01612223565b6d0161036b9b39739b2b73232b91d160951b60389290910191820152855161203d8160468401858a01612223565b6801610373430b9b41d160bd1b60469290910191820152845161206681604f8401858901612223565b01604f0198975050505050505050565b8281526040602082015260006106136040830184611ef1565b6040815260006120a26040830185611ef1565b90508260208301529392505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b602081526000610a356020830184611ef1565b6080815260006121066080830187611ef1565b82810360208401526121188187611ef1565b9050828103604084015261212c8186611ef1565b91505082606083015295945050505050565b6020808252818101527f476174657761793a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600082198211156121d4576121d46122d4565b500190565b6000826121e8576121e86122ea565b500490565b6000816000190483118215151615612207576122076122d4565b500290565b60008282101561221e5761221e6122d4565b500390565b60005b8381101561223e578181015183820152602001612226565b8381111561224d576000848401525b50505050565b600081612262576122626122d4565b506000190190565b600181811c9082168061227e57607f821691505b6020821081141561229f57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156122b9576122b96122d4565b5060010190565b6000826122cf576122cf6122ea565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610a7d57600080fdfea2646970667358221220d22f6a593f3ee7f137e822afaf947af9f7d2cfd994984ad3d28d50f575fe5e3364736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c806352ad0d5e116100c3578063a3f4df7e1161007c578063a3f4df7e146102b4578063aed92d35146102de578063b48272cc146101ef578063c54216b4146102e6578063dbb82bd8146102f9578063fc0c546a1461030c57600080fd5b806352ad0d5e1461023b5780635667981b1461025e5780635c222bad146102715780637ad3def2146102865780638da5cb5b14610299578063976e7a3e146102a157600080fd5b80632e21384d116101155780632e21384d146101d6578063345763ad146101de57806338463cff146101ef5780633f1264ef14610202578063512e2718146102155780635266ba0c1461022857600080fd5b806309698130146101525780630cadbde01461017c578063159ab14d1461019157806321df0da7146101b257806321e6b53d146101c3575b600080fd5b6038546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b61018f61018a366004611c82565b610314565b005b6101a461019f366004611af6565b6103a1565b604051908152602001610173565b6036546001600160a01b031661015f565b61018f6101d1366004611a81565b6103f8565b6039546101a4565b6037546001600160a01b031661015f565b6101a46101fd366004611bf4565b6105b0565b6101a4610210366004611b57565b61061b565b6101a4610223366004611d8d565b61072a565b61018f610236366004611a81565b6108a2565b61024e610249366004611add565b610979565b6040519015158152602001610173565b61018f61026c366004611a81565b610a45565b610279610a80565b60405161017391906120e0565b61018f610294366004611a81565b610b12565b61015f610b4a565b6101a46102af366004611cea565b610bd3565b6102796040518060400160405280600b81526020016a4d696e744761746577617960a81b81525081565b6101a4610c82565b61018f6102f4366004611c40565b610cdb565b61018f610307366004611c82565b610d18565b61015f610d93565b600054610100900460ff168061032d575060005460ff16155b6103525760405162461bcd60e51b815260040161034990612173565b60405180910390fd5b600054610100900460ff16158015610374576000805461ffff19166101011790555b61037c610da7565b61038885858585610d18565b801561039a576000805461ff00191690555b5050505050565b60006103ee86868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103e99250610e1a915050565b610e1e565b9695505050505050565b33610401610b4a565b6001600160a01b0316146104275760405162461bcd60e51b81526004016103499061213e565b803b61048e5760405162461bcd60e51b815260206004820152603060248201527f4d696e74476174657761793a206e65787420746f6b656e206f776e6572206d7560448201526f1cdd08189948184818dbdb9d1c9858dd60821b6064820152608401610349565b6001600160a01b0381166104f25760405162461bcd60e51b815260206004820152602560248201527f4d696e74476174657761793a20696e76616c6964206e65787420746f6b656e2060448201526437bbb732b960d91b6064820152608401610349565b60006105066036546001600160a01b031690565b60405163f2fde38b60e01b81526001600160a01b0384811660048301529192509082169063f2fde38b90602401600060405180830381600087803b15801561054d57600080fd5b505af1158015610561573d6000803e3d6000fd5b50506040516001600160a01b038086169350841691507f0670e929e0da48f4446360abae5c94415b26a39a98993d2a69f1864d5130186c90600090a35050565b6037546001600160a01b031690565b600061061384848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020808201835283825282519081019092529181529093509150869050336110e5565b6110e5565b949350505050565b6000806106306038546001600160a01b031690565b90506001600160a01b0381166106885760405162461bcd60e51b815260206004820152601c60248201527f476174657761793a206e6f2070726576696f75732067617465776179000000006044820152606401610349565b336001600160a01b038216146106da5760405162461bcd60e51b815260206004820152601760248201527611d85d195dd85e4e881b9bdd08185d5d1a1bdc9a5e9959604a1b6044820152606401610349565b61071e88888888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250610e1e915050565b98975050505050505050565b60008061073f6038546001600160a01b031690565b90506001600160a01b0381166107975760405162461bcd60e51b815260206004820152601c60248201527f476174657761793a206e6f2070726576696f75732067617465776179000000006044820152606401610349565b336001600160a01b038216146107e95760405162461bcd60e51b815260206004820152601760248201527611d85d195dd85e4e881b9bdd08185d5d1a1bdc9a5e9959604a1b6044820152606401610349565b6108948a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b908190840183828082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a90819084018382808284376000920191909152508a92508991506110e59050565b9a9950505050505050505050565b336108ab610b4a565b6001600160a01b0316146108d15760405162461bcd60e51b81526004016103499061213e565b6001600160a01b0381166109275760405162461bcd60e51b815260206004820152601860248201527f476174657761793a20696e76616c6964206164647265737300000000000000006044820152606401610349565b603880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fd420320c6286dfd203f890abd5a2bbf75c64ef636ed72e192259fa1d133cd55b90600090a35050565b60008181526035602052604081205460ff161561099857506001919050565b60006109ac6038546001600160a01b031690565b90506001600160a01b03811615610a3c5760405163295686af60e11b8152600481018490526001600160a01b038216906352ad0d5e9060240160206040518083038186803b1580156109fd57600080fd5b505afa158015610a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a359190611abb565b9392505050565b50600092915050565b33610a4e610b4a565b6001600160a01b031614610a745760405162461bcd60e51b81526004016103499061213e565b610a7d816112ae565b50565b606060338054610a8f9061226a565b80601f0160208091040260200160405190810160405280929190818152602001828054610abb9061226a565b8015610b085780601f10610add57610100808354040283529160200191610b08565b820191906000526020600020905b815481529060010190602001808311610aeb57829003601f168201915b5050505050905090565b33610b1b610b4a565b6001600160a01b031614610b415760405162461bcd60e51b81526004016103499061213e565b610a7d81611362565b6000610b5e6037546001600160a01b031690565b6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9657600080fd5b505afa158015610baa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bce9190611a9e565b905090565b600061071e88888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a915089908190840183828082843760009201919091525050604080516020601f8b01819004810282018101909252898152925089915088908190840183828082843760009201919091525088925061060e9150610e1a9050565b603454600090610cd45760405162461bcd60e51b815260206004820152601860248201527f476174657761793a206e6f7420696e697469616c697a656400000000000000006044820152606401610349565b5060345490565b33610ce4610b4a565b6001600160a01b031614610d0a5760405162461bcd60e51b81526004016103499061213e565b610d1482826113fb565b5050565b600054610100900460ff1680610d31575060005460ff16155b610d4d5760405162461bcd60e51b815260040161034990612173565b600054610100900460ff16158015610d6f576000805461ffff19166101011790555b610d77610da7565b610d80836112ae565b610d8a85856113fb565b61038882611362565b6000610bce6036546001600160a01b031690565b600054610100900460ff1680610dc0575060005460ff16155b610ddc5760405162461bcd60e51b815260040161034990612173565b600054610100900460ff16158015610dfe576000805461ffff19166101011790555b610e06611592565b8015610a7d576000805461ff001916905550565b3390565b600080610e7a8787610e2e610c82565b604080516020808201959095528082019390935260608301919091526001600160a01b038716608083015260a08083018a90528151808403909101815260c09092019052805191012090565b9050610e8581610979565b15610ede5760405162461bcd60e51b8152602060048201526024808201527f4d696e74476174657761793a207369676e617475726520616c726561647920736044820152631c195b9d60e21b6064820152608401610349565b630b135d3f60e11b610ef86037546001600160a01b031690565b6001600160a01b0316631626ba7e83876040518363ffffffff1660e01b8152600401610f25929190612076565b60206040518083038186803b158015610f3d57600080fd5b505afa158015610f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f759190611bca565b6001600160e01b0319161461100357610f8f8760206115fc565b610f9887611798565b610faa610fa3610c82565b60206115fc565b610fbe866001600160a01b031660146115fc565b610fc98960206115fc565b604051602001610fdd959493929190611f77565b60408051601f198184030181529082905262461bcd60e51b8252610349916004016120e0565b6000818152603560205260409020805460ff1916600117905561102e6036546001600160a01b031690565b6040516340c10f1960e01b81526001600160a01b0385811660048301526024820189905291909116906340c10f1990604401600060405180830381600087803b15801561107a57600080fd5b505af115801561108e573d6000803e3d6000fd5b50505050848160001c846001600160a01b03167fa58ba939eb08dab7eaf8ad09c16e7405ee88e5153e15da62d5481296a9f727fa896040516110d291815260200190565b60405180910390a4509395945050505050565b60006110f18651151590565b61113d5760405162461bcd60e51b815260206004820181905260248201527f4d696e74476174657761793a20746f206164647265737320697320656d7074796044820152606401610349565b6036546001600160a01b0316604051632770a7eb60e21b81526001600160a01b038481166004830152602482018690529190911690639dc29fac90604401600060405180830381600087803b15801561119557600080fd5b505af11580156111a9573d6000803e3d6000fd5b5050505060006111b860395490565b90506111c48651151590565b806111d0575060008551115b1561124457856040516111e39190611f1d565b6040518091039020876040516111f99190611f1d565b6040518091039020827ff1e98bc6e5ee93b47362bddb133886a2b471c968633a462b824f57cdb4b36c528a8a8a8a60405161123794939291906120f3565b60405180910390a4611295565b866040516112529190611f1d565b6040518091039020817f1619fc95050ffb8c94c9077c82b3e1ebbf8d571b6234241c55ba0aaf40da019e898760405161128c92919061208f565b60405180910390a35b6112a08160016121c1565b603955509195945050505050565b6001600160a01b0381166113105760405162461bcd60e51b815260206004820152602360248201527f476174657761793a20696e76616c6964207369676e617475726520766572696660448201526234b2b960e91b6064820152608401610349565b603780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907ff7dbe6f0a40adabc688e64fce7060ca2f466fbf846227fb5e4e05305553bae5e90600090a35050565b6001600160a01b0381166113b15760405162461bcd60e51b815260206004820152601660248201527523b0ba32bbb0bc9d1034b73b30b634b2103a37b5b2b760511b6044820152606401610349565b603680546001600160a01b0319166001600160a01b0383169081179091556040517f02dec22a3d1e8f9cdc0c7cd17ecee187f635788c40755be0a72dcd86a05e564d90600090a250565b61143a82828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061189692505050565b61147f5760405162461bcd60e51b815260206004820152601660248201527511d85d195dd85e4e881a5b9d985b1a5908185cdcd95d60521b6044820152606401610349565b61148b6033838361199f565b50600061154a83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114d192506105a1915050565b6001600160a01b03166332e21ae76040518163ffffffff1660e01b815260040160006040518083038186803b15801561150957600080fd5b505afa15801561151d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115459190810190611e44565b6118b8565b905080603481905550807f2e7c1f9bcc3b09d8e05594ab5d17b6c9b15b24cd506c5212f051f22990d0813184846040516115859291906120b1565b60405180910390a2505050565b600054610100900460ff16806115ab575060005460ff16155b6115c75760405162461bcd60e51b815260040161034990612173565b600054610100900460ff16158015610e06576000805461ffff19166101011790558015610a7d576000805461ff001916905550565b6060600061160b8360026121ed565b6116169060026121c1565b67ffffffffffffffff81111561162e5761162e612316565b6040519080825280601f01601f191660200182016040528015611658576020820181803683370190505b509050600360fc1b8160008151811061167357611673612300565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106116a2576116a2612300565b60200101906001600160f81b031916908160001a90535060006116c68460026121ed565b6116d19060016121c1565b90505b6001811115611749576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061170557611705612300565b1a60f81b82828151811061171b5761171b612300565b60200101906001600160f81b031916908160001a90535060049490941c9361174281612253565b90506116d4565b508315610a355760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610349565b6060816117bc5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156117e657806117d0816122a5565b91506117df9050600a836121d9565b91506117c0565b60008167ffffffffffffffff81111561180157611801612316565b6040519080825280601f01601f19166020018201604052801561182b576020820181803683370190505b5090505b84156106135761184060018361220c565b915061184d600a866122c0565b6118589060306121c1565b60f81b81838151811061186d5761186d612300565b60200101906001600160f81b031916908160001a90535061188f600a866121d9565b945061182f565b60006118a28251151590565b80156118b257506118b2826118eb565b92915050565b600082826040516020016118cd929190611f39565b60405160208183030381529060405280519060200120905092915050565b6000805b825181101561199657600083828151811061190c5761190c612300565b016020015160f81c90506041811080159061192b5750605a8160ff1611155b80611949575060618160ff16101580156119495750607a8160ff1611155b80611967575060308160ff1610158015611967575060398160ff1611155b8061197557508060ff16605f145b611983575060009392505050565b508061198e816122a5565b9150506118ef565b50600192915050565b8280546119ab9061226a565b90600052602060002090601f0160209004810192826119cd5760008555611a13565b82601f106119e65782800160ff19823516178555611a13565b82800160010185558215611a13579182015b82811115611a135782358255916020019190600101906119f8565b50611a1f929150611a23565b5090565b5b80821115611a1f5760008155600101611a24565b60008083601f840112611a4a57600080fd5b50813567ffffffffffffffff811115611a6257600080fd5b602083019150836020828501011115611a7a57600080fd5b9250929050565b600060208284031215611a9357600080fd5b8135610a358161232c565b600060208284031215611ab057600080fd5b8151610a358161232c565b600060208284031215611acd57600080fd5b81518015158114610a3557600080fd5b600060208284031215611aef57600080fd5b5035919050565b600080600080600060808688031215611b0e57600080fd5b853594506020860135935060408601359250606086013567ffffffffffffffff811115611b3a57600080fd5b611b4688828901611a38565b969995985093965092949392505050565b60008060008060008060a08789031215611b7057600080fd5b863595506020870135945060408701359350606087013567ffffffffffffffff811115611b9c57600080fd5b611ba889828a01611a38565b9094509250506080870135611bbc8161232c565b809150509295509295509295565b600060208284031215611bdc57600080fd5b81516001600160e01b031981168114610a3557600080fd5b600080600060408486031215611c0957600080fd5b833567ffffffffffffffff811115611c2057600080fd5b611c2c86828701611a38565b909790965060209590950135949350505050565b60008060208385031215611c5357600080fd5b823567ffffffffffffffff811115611c6a57600080fd5b611c7685828601611a38565b90969095509350505050565b60008060008060608587031215611c9857600080fd5b843567ffffffffffffffff811115611caf57600080fd5b611cbb87828801611a38565b9095509350506020850135611ccf8161232c565b91506040850135611cdf8161232c565b939692955090935050565b60008060008060008060006080888a031215611d0557600080fd5b873567ffffffffffffffff80821115611d1d57600080fd5b611d298b838c01611a38565b909950975060208a0135915080821115611d4257600080fd5b611d4e8b838c01611a38565b909750955060408a0135915080821115611d6757600080fd5b50611d748a828b01611a38565b989b979a50959894979596606090950135949350505050565b60008060008060008060008060a0898b031215611da957600080fd5b883567ffffffffffffffff80821115611dc157600080fd5b611dcd8c838d01611a38565b909a50985060208b0135915080821115611de657600080fd5b611df28c838d01611a38565b909850965060408b0135915080821115611e0b57600080fd5b50611e188b828c01611a38565b909550935050606089013591506080890135611e338161232c565b809150509295985092959890939650565b600060208284031215611e5657600080fd5b815167ffffffffffffffff80821115611e6e57600080fd5b818401915084601f830112611e8257600080fd5b815181811115611e9457611e94612316565b604051601f8201601f19908116603f01168101908382118183101715611ebc57611ebc612316565b81604052828152876020848701011115611ed557600080fd5b611ee6836020830160208801612223565b979650505050505050565b60008151808452611f09816020860160208601612223565b601f01601f19169290920160200192915050565b60008251611f2f818460208701612223565b9190910192915050565b60008351611f4b818460208801612223565b622f746f60e81b9083019081528351611f6b816003840160208801612223565b01600301949350505050565b7f4d696e74476174657761793a20696e76616c6964207369676e61747572652e20815260006020660383430b9b41d160cd1b818401528751611fbf8160278601848c01612223565b690161030b6b7bab73a1d160b51b6027918501918201528751611fe88160318401858c01612223565b6605840e6d0c2e6d60cb1b60319290910191820152865161200f8160388401858b01612223565b6d0161036b9b39739b2b73232b91d160951b60389290910191820152855161203d8160468401858a01612223565b6801610373430b9b41d160bd1b60469290910191820152845161206681604f8401858901612223565b01604f0198975050505050505050565b8281526040602082015260006106136040830184611ef1565b6040815260006120a26040830185611ef1565b90508260208301529392505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b602081526000610a356020830184611ef1565b6080815260006121066080830187611ef1565b82810360208401526121188187611ef1565b9050828103604084015261212c8186611ef1565b91505082606083015295945050505050565b6020808252818101527f476174657761793a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600082198211156121d4576121d46122d4565b500190565b6000826121e8576121e86122ea565b500490565b6000816000190483118215151615612207576122076122d4565b500290565b60008282101561221e5761221e6122d4565b500390565b60005b8381101561223e578181015183820152602001612226565b8381111561224d576000848401525b50505050565b600081612262576122626122d4565b506000190190565b600181811c9082168061227e57607f821691505b6020821081141561229f57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156122b9576122b96122d4565b5060010190565b6000826122cf576122cf6122ea565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610a7d57600080fdfea2646970667358221220d22f6a593f3ee7f137e822afaf947af9f7d2cfd994984ad3d28d50f575fe5e3364736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burnWithPayload(string,string,bytes,uint256)": {
        "params": {
          "amount": "The amount of the token being locked, in the asset's        smallest unit. (e.g. satoshis for BTC)",
          "recipientAddress": "The address to which the locked assets will be        minted to. The address should be a plain-text address, without        decoding to bytes first.",
          "recipientChain": "The target chain to which the assets are being        moved to.",
          "recipientPayload": "An optional payload to be passed to the        recipient chain along with the address."
        }
      },
      "mint(bytes32,uint256,bytes32,bytes)": {
        "params": {
          "amount": "The amount of the token being minted, in its smallest        value. (e.g. satoshis for BTC).",
          "nHash": "(nonce hash) The hash of the nonce, amount and pHash.",
          "pHash": "(payload hash) The hash of the payload associated with the        mint.",
          "sig": "The signature of the hash of the following values:        (pHash, amount, recipient, nHash), signed by the mintAuthority."
        }
      },
      "updateAsset(string)": {
        "params": {
          "nextAsset": "The new asset."
        }
      },
      "updatePreviousGateway(address)": {
        "params": {
          "newPreviousGateway": "The new gateway contract's address."
        }
      },
      "updateSignatureVerifier(address)": {
        "params": {
          "newSignatureVerifier": "The new verifier contract address."
        }
      },
      "updateToken(address)": {
        "params": {
          "newToken": "The new ERC20 token contract's address."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(bytes,uint256)": {
        "notice": "Same as `burn` with the recipient parameter being `bytes` instead of a `string`. For backwards compatibility with the MintGatewayV2."
      },
      "burn(string,uint256)": {
        "notice": "burn is a convenience function that is equivalent to calling         `burnWithPayload` with an empty payload and chain, releasing         the asset to the native chain."
      },
      "burnWithPayload(string,string,bytes,uint256)": {
        "notice": "burnWithPayload allows minted assets to be released to their         native chain, or to another chain as specified by the chain and         payload parameters.         WARNING: Burning with invalid parameters can cause the funds to         become unrecoverable."
      },
      "mint(bytes32,uint256,bytes32,bytes)": {
        "notice": "mint verifies a mint approval signature from RenVM and creates         tokens after taking a fee for the `_feeRecipient`."
      },
      "owner()": {
        "notice": "The Gateway is controlled by the owner of the SignatureVerifier. This allows for the owner of every Gateway to be updated with a single update to the SignatureVerifier contract."
      },
      "transferTokenOwnership(address)": {
        "notice": "Allow the owner to update the owner of the RenERC20 token."
      },
      "updateAsset(string)": {
        "notice": "Allow the owner to update the asset."
      },
      "updatePreviousGateway(address)": {
        "notice": "Allow the owner to update the previous gateway used for backwards compatibility."
      },
      "updateSignatureVerifier(address)": {
        "notice": "Allow the owner to update the signature verifier contract."
      },
      "updateToken(address)": {
        "notice": "Allow the owner to update the ERC20 token contract."
      }
    },
    "notice": "MintGateway handles verifying mint and burn requests. A mintAuthority approves new assets to be minted by providing a digital signature. An owner of an asset can request for it to be burnt.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 773,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 776,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2463,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12101,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "_asset",
        "offset": 0,
        "slot": "51",
        "type": "t_string_storage"
      },
      {
        "astId": 12103,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "_selectorHash",
        "offset": 0,
        "slot": "52",
        "type": "t_bytes32"
      },
      {
        "astId": 12108,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "_status",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 12111,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "_token",
        "offset": 0,
        "slot": "54",
        "type": "t_address"
      },
      {
        "astId": 12114,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "_signatureVerifier",
        "offset": 0,
        "slot": "55",
        "type": "t_contract(IRenVMSignatureVerifier)11888"
      },
      {
        "astId": 12116,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "_previousGateway",
        "offset": 0,
        "slot": "56",
        "type": "t_address"
      },
      {
        "astId": 12118,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "_eventNonce",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 12122,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "__gap",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)43_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)43_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[43]",
        "numberOfBytes": "1376"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IRenVMSignatureVerifier)11888": {
        "encoding": "inplace",
        "label": "contract IRenVMSignatureVerifier",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}