{
  "language": "Solidity",
  "sources": {
    "src/BasicBridge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\nimport {IGatewayRegistry} from \"./GatewayRegistry/interfaces/IGatewayRegistry.sol\";\nimport {IMintGateway} from \"./Gateways/interfaces/IMintGateway.sol\";\nimport {ILockGateway} from \"./Gateways/interfaces/ILockGateway.sol\";\n\ncontract BasicBridge is Context {\n    using SafeERC20 for IERC20;\n\n    string public constant NAME = \"BasicBridge\";\n\n    IGatewayRegistry public registry;\n\n    constructor(IGatewayRegistry _registry) {\n        registry = _registry;\n    }\n\n    function mint(\n        // Payload\n        string calldata symbol,\n        address recipient,\n        // Required\n        uint256 amount,\n        bytes32 nHash,\n        bytes calldata sig\n    ) external {\n        IERC20 renAsset = registry.getRenAssetBySymbol(symbol);\n        IMintGateway mintGateway = registry.getMintGatewayBySymbol(symbol);\n\n        if (address(renAsset) == address(0x0) || address(mintGateway) == address(0x0)) {\n            revert(string(abi.encodePacked(\"BasicBridge: unknown asset \", symbol)));\n        }\n\n        bytes32 payloadHash = keccak256(abi.encode(symbol, recipient));\n        uint256 amountMinted = mintGateway.mint(payloadHash, amount, nHash, sig);\n        renAsset.safeTransfer(recipient, amountMinted);\n    }\n\n    function burn(\n        string calldata symbol,\n        string calldata recipient,\n        uint256 amount\n    ) external {\n        IERC20 renAsset = registry.getRenAssetBySymbol(symbol);\n        IMintGateway mintGateway = registry.getMintGatewayBySymbol(symbol);\n\n        if (address(renAsset) == address(0x0) || address(mintGateway) == address(0x0)) {\n            revert(string(abi.encodePacked(\"BasicBridge: unknown asset \", symbol)));\n        }\n\n        renAsset.safeTransferFrom(_msgSender(), address(this), amount);\n        mintGateway.burn(recipient, amount);\n    }\n\n    function lock(\n        string calldata symbol,\n        string calldata recipientAddress,\n        string calldata recipientChain,\n        bytes calldata recipientPayload,\n        uint256 amount\n    ) external {\n        IERC20 lockAsset = registry.getLockAssetBySymbol(symbol);\n        ILockGateway lockGateway = registry.getLockGatewayBySymbol(symbol);\n\n        if (address(lockAsset) == address(0x0) || address(lockGateway) == address(0x0)) {\n            revert(string(abi.encodePacked(\"BasicBridge: unknown asset \", symbol)));\n        }\n\n        lockAsset.safeTransferFrom(_msgSender(), address(this), amount);\n        lockAsset.safeIncreaseAllowance(address(lockGateway), amount);\n        lockGateway.lock(recipientAddress, recipientChain, recipientPayload, amount);\n    }\n\n    function release(\n        // Payload\n        string calldata symbol,\n        address recipient,\n        // Required\n        uint256 amount,\n        bytes32 nHash,\n        bytes calldata sig\n    ) external {\n        IERC20 lockAsset = registry.getLockAssetBySymbol(symbol);\n        ILockGateway lockGateway = registry.getLockGatewayBySymbol(symbol);\n\n        if (address(lockAsset) == address(0x0) || address(lockGateway) == address(0x0)) {\n            revert(string(abi.encodePacked(\"BasicBridge: unknown asset \", symbol)));\n        }\n\n        bytes32 payloadHash = keccak256(abi.encode(symbol, recipient));\n        uint256 amountReleased = lockGateway.release(payloadHash, amount, nHash, sig);\n        lockAsset.safeTransfer(recipient, amountReleased);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "src/GatewayRegistry/interfaces/IGatewayRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {IMintGateway} from \"../../Gateways/interfaces/IMintGateway.sol\";\nimport {ILockGateway} from \"../../Gateways/interfaces/ILockGateway.sol\";\n\nabstract contract IGatewayRegistry {\n    function signatureVerifier() external view virtual returns (address);\n\n    function chainId() external view virtual returns (uint256);\n\n    function chainName() external view virtual returns (string memory);\n\n    function getMintGatewaySymbols(uint256 from, uint256 count) external view virtual returns (string[] memory);\n\n    function getLockGatewaySymbols(uint256 from, uint256 count) external view virtual returns (string[] memory);\n\n    function getMintGatewayByToken(address token) external view virtual returns (IMintGateway);\n\n    function getMintGatewayBySymbol(string calldata tokenSymbol) external view virtual returns (IMintGateway);\n\n    function getRenAssetBySymbol(string calldata tokenSymbol) external view virtual returns (IERC20);\n\n    function getLockGatewayByToken(address token) external view virtual returns (ILockGateway);\n\n    function getLockGatewayBySymbol(string calldata tokenSymbol) external view virtual returns (ILockGateway);\n\n    function getLockAssetBySymbol(string calldata tokenSymbol) external view virtual returns (IERC20);\n}\n"
    },
    "src/Gateways/interfaces/IMintGateway.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nabstract contract IMintGateway {\n    /// @dev For backwards compatiblity reasons, the sigHash is cast to a\n    /// uint256.\n    event LogMint(address indexed to, uint256 amount, uint256 indexed sigHash, bytes32 indexed nHash);\n\n    /// @dev Once `LogBurnToChain` is enabled on mainnet, LogBurn may be\n    /// replaced by LogBurnToChain with empty payload and chain fields.\n    /// @dev For backwards compatibility, `to` is bytes instead of a string.\n    event LogBurn(\n        bytes to,\n        uint256 amount,\n        uint256 indexed burnNonce,\n        // Indexed versions of previous parameters.\n        bytes indexed indexedTo\n    );\n    event LogBurnToChain(\n        string recipientAddress,\n        string recipientChain,\n        bytes recipientPayload,\n        uint256 amount,\n        uint256 indexed burnNonce,\n        // Indexed versions of previous parameters.\n        string indexed recipientAddressIndexed,\n        string indexed recipientChainIndexed\n    );\n\n    function mint(\n        bytes32 pHash,\n        uint256 amount,\n        bytes32 nHash,\n        bytes calldata sig\n    ) external virtual returns (uint256);\n\n    function burnWithPayload(\n        string calldata recipientAddress,\n        string calldata recipientChain,\n        bytes calldata recipientPayload,\n        uint256 amount\n    ) external virtual returns (uint256);\n\n    function burn(string calldata recipient, uint256 amount) external virtual returns (uint256);\n\n    function burn(bytes calldata recipient, uint256 amount) external virtual returns (uint256);\n}\n"
    },
    "src/Gateways/interfaces/ILockGateway.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nabstract contract ILockGateway {\n    event LogRelease(address indexed recipient, uint256 amount, bytes32 indexed sigHash, bytes32 indexed nHash);\n    event LogLockToChain(\n        string recipientAddress,\n        string recipientChain,\n        bytes recipientPayload,\n        uint256 amount,\n        uint256 indexed lockNonce,\n        // Indexed versions of previous parameters.\n        string indexed recipientAddressIndexed,\n        string indexed recipientChainIndexed\n    );\n\n    function lock(\n        string calldata recipientAddress,\n        string calldata recipientChain,\n        bytes calldata recipientPayload,\n        uint256 amount\n    ) external virtual returns (uint256);\n\n    function release(\n        bytes32 pHash,\n        uint256 amount,\n        bytes32 nHash,\n        bytes calldata sig\n    ) external virtual returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "src/GatewayRegistry/GatewayRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {AccessControlEnumerableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport {AccessControlUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {StringsUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {TransparentUpgradeableProxy} from \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\nimport {IMintGateway} from \"../Gateways/interfaces/IMintGateway.sol\";\nimport {ILockGateway} from \"../Gateways/interfaces/ILockGateway.sol\";\nimport {String} from \"../libraries/String.sol\";\nimport {RenAssetFactory} from \"./RenAssetFactory.sol\";\nimport {StringSet} from \"../libraries/StringSet.sol\";\n\ncontract GatewayRegistryStateV2 {\n    struct GatewayDetails {\n        address gateway;\n        address token;\n    }\n\n    StringSet.Set internal mintGatewaySymbols;\n    StringSet.Set internal lockGatewaySymbols;\n\n    mapping(address => string) internal mintSymbolByToken;\n    mapping(string => GatewayDetails) internal mintGatewayDetailsBySymbol;\n\n    mapping(address => string) internal lockSymbolByToken;\n    mapping(string => GatewayDetails) internal lockGatewayDetailsBySymbol;\n\n    address internal _signatureVerifier;\n\n    uint256 internal _chainId;\n\n    address internal _transferContract;\n\n    // Leave a gap so that storage values added in future upgrages don't corrupt\n    // the storage of contracts that inherit from this contract.\n    // Note that StringSet.Set occupies two slots.\n    uint256[39] private __gap;\n}\n\ncontract GatewayRegistryGettersV2 is GatewayRegistryStateV2 {\n    using StringSet for StringSet.Set;\n\n    function getChainId() public view returns (uint256) {\n        return _chainId;\n    }\n\n    function getSignatureVerifier() public view returns (address) {\n        require(_signatureVerifier != address(0x0), \"GatewayRegistry: not initialized\");\n        return _signatureVerifier;\n    }\n\n    function getTransferContract() external view returns (address) {\n        require(_transferContract != address(0x0), \"GatewayRegistry: not initialized\");\n        return _transferContract;\n    }\n\n    /// @dev To get all the registered Gateway contracts set count to `0`.\n    function getMintGatewaySymbols(uint256 from, uint256 count) external view returns (string[] memory) {\n        return enumerateSet(mintGatewaySymbols, from, count);\n    }\n\n    /// @dev To get all the registered tokens set count to `0`.\n    function getLockGatewaySymbols(uint256 from, uint256 count) external view returns (string[] memory) {\n        return enumerateSet(lockGatewaySymbols, from, count);\n    }\n\n    function enumerateSet(\n        StringSet.Set storage set,\n        uint256 from,\n        uint256 count\n    ) internal view returns (string[] memory) {\n        uint256 length = set.length();\n\n        if (count == 0 || from + count > length) {\n            count = length - from;\n        }\n\n        string[] memory gateways = new string[](count);\n\n        for (uint256 i = 0; i < count; i++) {\n            gateways[i] = set.at(i + from);\n        }\n\n        return gateways;\n    }\n\n    /// @notice Returns the Gateway contract for the given RenERC20 token\n    ///         address.\n    ///\n    /// @param token The address of the RenERC20 token contract.\n    function getMintGatewayByToken(address token) public view returns (IMintGateway) {\n        return IMintGateway(mintGatewayDetailsBySymbol[mintSymbolByToken[token]].gateway);\n    }\n\n    /// @notice Deprecated in favour of getMintGatewayByToken.\n    function getGatewayByToken(address token) external view returns (IMintGateway) {\n        return getMintGatewayByToken(token);\n    }\n\n    /// @notice Returns the Gateway contract for the given RenERC20 token\n    ///         symbol.\n    ///\n    /// @param tokenSymbol The symbol of the RenERC20 token contract.\n    function getMintGatewayBySymbol(string calldata tokenSymbol) public view returns (IMintGateway) {\n        return IMintGateway(mintGatewayDetailsBySymbol[tokenSymbol].gateway);\n    }\n\n    /// @notice Deprecated in favour of getMintGatewayBySymbol.\n    function getGatewayBySymbol(string calldata tokenSymbol) external view returns (IMintGateway) {\n        return getMintGatewayBySymbol(tokenSymbol);\n    }\n\n    /// @notice Returns the RenERC20 address for the given token symbol.\n    ///\n    /// @param tokenSymbol The symbol of the RenERC20 token contract to\n    ///        lookup.\n    function getRenAssetBySymbol(string calldata tokenSymbol) public view returns (IERC20) {\n        return IERC20(mintGatewayDetailsBySymbol[tokenSymbol].token);\n    }\n\n    /// @notice Deprecated in favour of getRenAssetBySymbol.\n    function getTokenBySymbol(string calldata tokenSymbol) external view returns (IERC20) {\n        return getRenAssetBySymbol(tokenSymbol);\n    }\n\n    function getLockGatewayByToken(address token_) external view returns (ILockGateway) {\n        return ILockGateway(lockGatewayDetailsBySymbol[lockSymbolByToken[token_]].gateway);\n    }\n\n    function getLockGatewayBySymbol(string calldata tokenSymbol) external view returns (ILockGateway) {\n        return ILockGateway(lockGatewayDetailsBySymbol[tokenSymbol].gateway);\n    }\n\n    function getLockAssetBySymbol(string calldata tokenSymbol) external view returns (IERC20) {\n        return IERC20(lockGatewayDetailsBySymbol[tokenSymbol].token);\n    }\n}\n\n/// GatewayRegistry is a mapping from assets to their associated\n/// RenERC20 and Gateway contracts.\ncontract GatewayRegistryV2 is\n    Initializable,\n    AccessControlEnumerableUpgradeable,\n    RenAssetFactory,\n    GatewayRegistryStateV2,\n    GatewayRegistryGettersV2\n{\n    using StringSet for StringSet.Set;\n\n    string public constant NAME = \"GatewayRegistry\";\n    bytes32 public constant CAN_UPDATE_GATEWAYS = keccak256(\"CAN_UPDATE_GATEWAYS\");\n    bytes32 public constant CAN_ADD_GATEWAYS = keccak256(\"CAN_ADD_GATEWAYS\");\n\n    function __GatewayRegistry_init(\n        uint256 chainId_,\n        address signatureVerifier_,\n        address transferContract,\n        address renAssetProxyBeacon_,\n        address mintGatewayProxyBeacon_,\n        address lockGatewayProxyBeacon_,\n        address adminAddress,\n        address[] calldata gatewayDeployers\n    ) external initializer {\n        __AccessControlEnumerable_init();\n        __RenAssetFactory_init(renAssetProxyBeacon_, mintGatewayProxyBeacon_, lockGatewayProxyBeacon_);\n        _chainId = chainId_;\n        _signatureVerifier = signatureVerifier_;\n        _transferContract = transferContract;\n\n        AccessControlEnumerableUpgradeable._setupRole(AccessControlUpgradeable.DEFAULT_ADMIN_ROLE, adminAddress);\n        AccessControlEnumerableUpgradeable._setupRole(CAN_UPDATE_GATEWAYS, adminAddress);\n        AccessControlEnumerableUpgradeable._setupRole(CAN_ADD_GATEWAYS, adminAddress);\n        for (uint256 i = 0; i < gatewayDeployers.length; ++i) {\n            _setupRole(CAN_ADD_GATEWAYS, gatewayDeployers[i]);\n        }\n    }\n\n    /// @dev The symbol is included twice because strings have to be hashed\n    /// first in order to be used as a log index/topic.\n    event LogMintGatewayAdded(\n        string symbol,\n        address indexed token,\n        address indexed gatewayContract,\n        // Indexed versions of previous parameters.\n        string indexed indexedSymbol\n    );\n    event LogMintGatewayRemoved(\n        string symbol,\n        // Indexed versions of previous parameters.\n        string indexed indexedSymbol\n    );\n    event LogLockGatewayAdded(\n        string symbol,\n        address indexed token,\n        address indexed gatewayContract,\n        // Indexed versions of previous parameters.\n        string indexed indexedSymbol\n    );\n    event LogLockGatewayRemoved(\n        string symbol,\n        // Indexed versions of previous parameters.\n        string indexed indexedSymbol\n    );\n\n    event LogSignatureVerifierUpdated(address indexed oldSignatureVerifier, address indexed newSignatureVerifier);\n    event LogTransferContractUpdated(address indexed oldTransferContract, address indexed newTransferContract);\n\n    // MODIFIERS ///////////////////////////////////////////////////////////////\n\n    modifier onlyValidString(string calldata str_) {\n        require(String.isValidString(str_), \"GatewayRegistry: empty or invalid string input\");\n        _;\n    }\n\n    function checkRoleVerbose(\n        bytes32 role,\n        string memory roleName,\n        address account\n    ) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"GatewayRegistry: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        roleName\n                    )\n                )\n            );\n        }\n    }\n\n    modifier onlyRoleVerbose(bytes32 role, string memory roleName) {\n        checkRoleVerbose(role, roleName, _msgSender());\n        _;\n    }\n\n    // GOVERNANCE //////////////////////////////////////////////////////////////\n\n    /// @notice Allow the owner to update the signature verifier contract.\n    ///\n    /// @param newSignatureVerifier The new verifier contract address.\n    function updateSignatureVerifier(address newSignatureVerifier)\n        external\n        onlyRoleVerbose(CAN_UPDATE_GATEWAYS, \"CAN_UPDATE_GATEWAYS\")\n    {\n        require(newSignatureVerifier != address(0x0), \"GatewayRegistry: invalid signature verifier\");\n        address oldSignatureVerifier = _signatureVerifier;\n        _signatureVerifier = newSignatureVerifier;\n        emit LogSignatureVerifierUpdated(oldSignatureVerifier, newSignatureVerifier);\n    }\n\n    /// @notice Allow the owner to update the TransferContract contract.\n    ///\n    /// @param newTransferContract The new TransferContract contract address.\n    function updateTransferContract(address newTransferContract)\n        external\n        onlyRoleVerbose(CAN_UPDATE_GATEWAYS, \"CAN_UPDATE_GATEWAYS\")\n    {\n        require(newTransferContract != address(0x0), \"GatewayRegistry: invalid transfer with log\");\n        address oldTransferContract = _transferContract;\n        _transferContract = newTransferContract;\n        emit LogTransferContractUpdated(oldTransferContract, newTransferContract);\n    }\n\n    // MINT GATEWAYS ///////////////////////////////////////////////////////////\n\n    /// @notice Allow the owner to set the Gateway contract for a given\n    ///         RenERC20 token contract.\n    ///\n    /// @param symbol A string that identifies the token and gateway pair.\n    /// @param renAsset The address of the RenERC20 token contract.\n    /// @param mintGateway The address of the Gateway contract.\n    function addMintGateway(\n        string calldata symbol,\n        address renAsset,\n        address mintGateway\n    ) public onlyValidString(symbol) onlyRoleVerbose(CAN_ADD_GATEWAYS, \"CAN_ADD_GATEWAYS\") {\n        if (mintGatewaySymbols.contains(symbol)) {\n            // If there is an existing gateway for the symbol, delete it. The\n            // caller must also have the CAN_UPDATE_GATEWAYS role.\n            removeMintGateway(symbol);\n        }\n\n        // Check that token, Gateway and symbol haven't already been registered.\n        if (String.isNotEmpty(mintSymbolByToken[renAsset])) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"GatewayRegistry: \",\n                        symbol,\n                        \" token already registered as \",\n                        mintSymbolByToken[renAsset]\n                    )\n                )\n            );\n        }\n\n        // Add to list of gateways.\n        mintGatewaySymbols.add(symbol);\n\n        mintGatewayDetailsBySymbol[symbol] = GatewayDetails({token: renAsset, gateway: mintGateway});\n        mintSymbolByToken[renAsset] = symbol;\n\n        emit LogMintGatewayAdded(symbol, renAsset, mintGateway, symbol);\n    }\n\n    function deployMintGateway(\n        string calldata symbol,\n        address renAsset,\n        string calldata version\n    ) external onlyRoleVerbose(CAN_ADD_GATEWAYS, \"CAN_ADD_GATEWAYS\") {\n        if (mintGatewaySymbols.contains(symbol)) {\n            // Check role before expensive contract deployment.\n            checkRoleVerbose(CAN_UPDATE_GATEWAYS, \"CAN_UPDATE_GATEWAYS\", _msgSender());\n        }\n\n        address mintGateway = address(_deployMintGateway(symbol, getSignatureVerifier(), renAsset, version));\n        addMintGateway(symbol, renAsset, mintGateway);\n    }\n\n    function deployMintGatewayAndRenAsset(\n        string calldata symbol,\n        string calldata erc20Name,\n        string calldata erc20Symbol,\n        uint8 erc20Decimals,\n        string calldata version\n    ) external onlyRoleVerbose(CAN_ADD_GATEWAYS, \"CAN_ADD_GATEWAYS\") {\n        if (mintGatewaySymbols.contains(symbol)) {\n            // Check role before expensive contract deployment.\n            checkRoleVerbose(CAN_UPDATE_GATEWAYS, \"CAN_UPDATE_GATEWAYS\", _msgSender());\n        }\n\n        address renAsset = address(\n            _deployRenAsset(getChainId(), symbol, erc20Name, erc20Symbol, erc20Decimals, version)\n        );\n        address mintGateway = address(_deployMintGateway(symbol, getSignatureVerifier(), renAsset, version));\n        OwnableUpgradeable(renAsset).transferOwnership(mintGateway);\n        addMintGateway(symbol, renAsset, mintGateway);\n    }\n\n    /// @notice Allows the owner to remove the Gateway contract for a given\n    ///         RenERC20 contract.\n    ///\n    /// @param symbol The symbol of the token to deregister.\n    function removeMintGateway(string calldata symbol)\n        public\n        onlyRoleVerbose(CAN_UPDATE_GATEWAYS, \"CAN_UPDATE_GATEWAYS\")\n    {\n        address renAsset = mintGatewayDetailsBySymbol[symbol].token;\n        require(renAsset != address(0x0), \"GatewayRegistry: gateway not registered\");\n\n        // Remove token and Gateway contract\n        delete mintSymbolByToken[renAsset];\n        delete mintGatewayDetailsBySymbol[symbol];\n        mintGatewaySymbols.remove(symbol);\n\n        emit LogMintGatewayRemoved(symbol, symbol);\n    }\n\n    // LOCK GATEWAYS ///////////////////////////////////////////////////////////\n\n    /// @notice Allow the owner to set the Gateway contract for a given\n    ///         RenERC20 token contract.\n    ///\n    /// @param symbol A string that identifies the token and gateway pair.\n    /// @param lockAsset The address of the RenERC20 token contract.\n    /// @param lockGateway The address of the Gateway contract.\n    function addLockGateway(\n        string calldata symbol,\n        address lockAsset,\n        address lockGateway\n    ) public onlyValidString(symbol) onlyRoleVerbose(CAN_ADD_GATEWAYS, \"CAN_ADD_GATEWAYS\") {\n        if (lockGatewaySymbols.contains(symbol)) {\n            // If there is an existing gateway for the symbol, delete it. The\n            // caller must also have the CAN_UPDATE_GATEWAYS role.\n            removeLockGateway(symbol);\n        }\n\n        // Check that token hasn't already been registered.\n        if (String.isNotEmpty(lockSymbolByToken[lockAsset])) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"GatewayRegistry: \",\n                        symbol,\n                        \" token already registered as \",\n                        lockSymbolByToken[lockAsset]\n                    )\n                )\n            );\n        }\n\n        // Add to list of gateways.\n        lockGatewaySymbols.add(symbol);\n\n        lockGatewayDetailsBySymbol[symbol] = GatewayDetails({token: lockAsset, gateway: lockGateway});\n        lockSymbolByToken[lockAsset] = symbol;\n\n        emit LogLockGatewayAdded(symbol, lockAsset, lockGateway, symbol);\n    }\n\n    function deployLockGateway(\n        string calldata symbol,\n        address lockToken,\n        string calldata version\n    ) external onlyRoleVerbose(CAN_ADD_GATEWAYS, \"CAN_ADD_GATEWAYS\") {\n        if (lockGatewaySymbols.contains(symbol)) {\n            // Check role before expensive contract deployment.\n            checkRoleVerbose(CAN_UPDATE_GATEWAYS, \"CAN_UPDATE_GATEWAYS\", _msgSender());\n        }\n\n        address lockGateway = address(_deployLockGateway(symbol, getSignatureVerifier(), lockToken, version));\n        addLockGateway(symbol, lockToken, lockGateway);\n    }\n\n    /// @notice Allows the owner to remove the Gateway contract for a given\n    ///         asset contract.\n    ///\n    /// @param symbol The symbol of the token to deregister.\n    function removeLockGateway(string calldata symbol)\n        public\n        onlyRoleVerbose(CAN_UPDATE_GATEWAYS, \"CAN_UPDATE_GATEWAYS\")\n    {\n        require(lockGatewaySymbols.contains(symbol), \"GatewayRegistry: gateway not registered\");\n\n        address lockAsset = lockGatewayDetailsBySymbol[symbol].token;\n\n        // Remove token and Gateway contract\n        delete lockSymbolByToken[lockAsset];\n        delete lockGatewayDetailsBySymbol[symbol];\n        lockGatewaySymbols.remove(symbol);\n\n        emit LogLockGatewayRemoved(symbol, symbol);\n    }\n}\n\ncontract GatewayRegistryProxy is TransparentUpgradeableProxy {\n    constructor(\n        address logic,\n        address admin,\n        bytes memory data\n    ) payable TransparentUpgradeableProxy(logic, admin, data) {}\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __AccessControlEnumerable_init_unchained();\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal initializer {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {grantRole} to track enumerable memberships\n     */\n    function grantRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\n        super.grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {revokeRole} to track enumerable memberships\n     */\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\n        super.revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {renounceRole} to track enumerable memberships\n     */\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\n        super.renounceRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {_setupRole} to track enumerable memberships\n     */\n    function _setupRole(bytes32 role, address account) internal virtual override {\n        super._setupRole(role, account);\n        _roleMembers[role].add(account);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "src/libraries/String.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\n/// Library with common String checks.\nlibrary String {\n    /// Check that the string only contains alphanumeric characters, to avoid\n    /// UTF-8 characters that are indistinguishable from alphanumeric\n    /// characters.\n    function isAlphanumeric(string memory str) internal pure returns (bool) {\n        for (uint256 i = 0; i < bytes(str).length; i++) {\n            uint8 char = uint8(bytes(str)[i]);\n            if (!((char >= 65 && char <= 90) || (char >= 97 && char <= 122) || (char >= 48 && char <= 57))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /// Check that the string has at least one character.\n    function isNotEmpty(string memory str) internal pure returns (bool) {\n        return bytes(str).length > 0;\n    }\n\n    /// Check that the string is not empty and only has alphanumeric characters.\n    function isValidString(string memory str) internal pure returns (bool) {\n        return isNotEmpty(str) && isAlphanumeric(str);\n    }\n}\n"
    },
    "src/GatewayRegistry/RenAssetFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {ContextUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport {BeaconProxy} from \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {IMintGateway} from \"../Gateways/interfaces/IMintGateway.sol\";\nimport {ILockGateway} from \"../Gateways/interfaces/ILockGateway.sol\";\nimport {RenAssetProxyBeacon, MintGatewayProxyBeacon, LockGatewayProxyBeacon} from \"./ProxyBeacon.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract RenAssetFactoryState {\n    RenAssetProxyBeacon internal _renAssetProxyBeacon;\n    MintGatewayProxyBeacon internal _mintGatewayProxyBeacon;\n    LockGatewayProxyBeacon internal _lockGatewayProxyBeacon;\n}\n\nabstract contract RenAssetFactory is Initializable, ContextUpgradeable, RenAssetFactoryState {\n    event RenAssetProxyDeployed(\n        uint256 chainId,\n        string asset,\n        string name,\n        string symbol,\n        uint8 decimals,\n        string version\n    );\n    event MintGatewayProxyDeployed(string asset, address signatureVerifier, address token, string version);\n    event LockGatewayProxyDeployed(string asset, address signatureVerifier, address token, string version);\n\n    function getRenAssetProxyBeacon() public view returns (RenAssetProxyBeacon) {\n        return _renAssetProxyBeacon;\n    }\n\n    function getMintGatewayProxyBeacon() public view returns (MintGatewayProxyBeacon) {\n        return _mintGatewayProxyBeacon;\n    }\n\n    function getLockGatewayProxyBeacon() public view returns (LockGatewayProxyBeacon) {\n        return _lockGatewayProxyBeacon;\n    }\n\n    function __RenAssetFactory_init(\n        address renAssetProxyBeacon_,\n        address mintGatewayProxyBeacon_,\n        address lockGatewayProxyBeacon_\n    ) public initializer {\n        __Context_init();\n        _renAssetProxyBeacon = RenAssetProxyBeacon(renAssetProxyBeacon_);\n        _mintGatewayProxyBeacon = MintGatewayProxyBeacon(mintGatewayProxyBeacon_);\n        _lockGatewayProxyBeacon = LockGatewayProxyBeacon(lockGatewayProxyBeacon_);\n    }\n\n    function _deployRenAsset(\n        uint256 chainId,\n        string calldata asset,\n        string calldata name,\n        string calldata symbol,\n        uint8 decimals,\n        string calldata version\n    ) internal returns (IERC20) {\n        bytes memory encodedParameters = abi.encodeWithSignature(\n            \"__RenAsset_init(uint256,string,string,string,uint8,address)\",\n            chainId,\n            version,\n            name,\n            symbol,\n            decimals,\n            // Owner will be transferred to gateway\n            address(this)\n        );\n\n        bytes32 create2Salt = keccak256(abi.encodePacked(asset, version));\n\n        address renAsset = getRenAssetProxyBeacon().deployProxy(create2Salt, encodedParameters);\n\n        emit RenAssetProxyDeployed(chainId, asset, name, symbol, decimals, version);\n\n        return IERC20(renAsset);\n    }\n\n    function _deployMintGateway(\n        string calldata asset,\n        address signatureVerifier,\n        address token,\n        string calldata version\n    ) internal returns (IMintGateway) {\n        bytes memory encodedParameters = abi.encodeWithSignature(\n            \"__MintGateway_init(string,address,address)\",\n            asset,\n            signatureVerifier,\n            token\n        );\n\n        bytes32 create2Salt = keccak256(abi.encodePacked(asset, version));\n\n        address mintGateway = getMintGatewayProxyBeacon().deployProxy(create2Salt, encodedParameters);\n\n        emit MintGatewayProxyDeployed(asset, signatureVerifier, token, version);\n\n        return IMintGateway(mintGateway);\n    }\n\n    function _deployLockGateway(\n        string calldata asset,\n        address signatureVerifier,\n        address token,\n        string calldata version\n    ) internal returns (ILockGateway) {\n        bytes memory encodedParameters = abi.encodeWithSignature(\n            \"__LockGateway_init(string,address,address)\",\n            asset,\n            signatureVerifier,\n            token\n        );\n\n        bytes32 create2Salt = keccak256(abi.encodePacked(asset, version));\n\n        address lockGateway = getLockGatewayProxyBeacon().deployProxy(create2Salt, encodedParameters);\n\n        emit LockGatewayProxyDeployed(asset, signatureVerifier, token, version);\n\n        return ILockGateway(lockGateway);\n    }\n}\n"
    },
    "src/libraries/StringSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Modified from @openzeppelin/contracts's EnumerableSet to store strings.\n\n/*\n\nThe MIT License (MIT)\n\nCopyright (c) 2016-2020 zOS Global Limited\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nlibrary StringSet {\n    struct Set {\n        string[] _values;\n        mapping(string => uint256) _indexes; // 1-indexed\n    }\n\n    function add(Set storage set, string memory value) internal returns (bool) {\n        if (!contains(set, value)) {\n            set._values.push(value);\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function remove(Set storage set, string memory value) internal returns (bool) {\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // Swap the item with the last element so that it can be popped.\n            if (lastIndex != toDeleteIndex) {\n                string memory lastvalue = set._values[lastIndex];\n                set._values[toDeleteIndex] = lastvalue;\n                set._indexes[lastvalue] = valueIndex;\n            }\n            set._values.pop();\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function contains(Set storage set, string memory value) internal view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    function length(Set storage set) internal view returns (uint256) {\n        return set._values.length;\n    }\n\n    function at(Set storage set, uint256 index) internal view returns (string memory) {\n        return set._values[index];\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "src/GatewayRegistry/ProxyBeacon.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {UpgradeableBeacon} from \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport {BeaconProxy} from \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\n\ncontract ProxyBeacon is Context, UpgradeableBeacon {\n    event LogProxyDeployerUpdated(address indexed oldProxyDeployer, address indexed newProxyDeployer);\n\n    // Only allow one address to call `deployProxy`.\n    address private _proxyDeployer;\n\n    modifier onlyProxyDeployer() {\n        address proxyDeployer_ = getProxyDeployer();\n        require(\n            proxyDeployer_ != address(0x0) && _msgSender() == proxyDeployer_,\n            \"ProxyBeacon: caller is not the proxy deployer\"\n        );\n        _;\n    }\n\n    constructor(address implementation_, address contractOwner) UpgradeableBeacon(implementation_) {\n        transferOwnership(contractOwner);\n    }\n\n    // GETTERS /////////////////////////////////////////////////////////////////\n\n    function getProxyDeployer() public view returns (address) {\n        return _proxyDeployer;\n    }\n\n    // GOVERNANCE //////////////////////////////////////////////////////////////\n\n    function updateProxyDeployer(address newProxyDeployer) public onlyOwner {\n        require(newProxyDeployer != address(0x0), \"ProxyBeacon: invalid proxy deployer\");\n        address oldProxyDeployer = _proxyDeployer;\n        _proxyDeployer = newProxyDeployer;\n        emit LogProxyDeployerUpdated(oldProxyDeployer, newProxyDeployer);\n    }\n\n    // RESTRICTED //////////////////////////////////////////////////////////////\n\n    /// @notice Deploy a proxy that fetches its implementation from this\n    /// ProxyBeacon.\n    function deployProxy(bytes32 create2Salt, bytes calldata encodedParameters)\n        external\n        onlyProxyDeployer\n        returns (address)\n    {\n        // Deploy without initialization code so that the create2 address isn't\n        // based on the initialization parameters.\n        address proxy = address(new BeaconProxy{salt: create2Salt}(address(this), \"\"));\n\n        Address.functionCall(address(proxy), encodedParameters);\n\n        return proxy;\n\n    }\n}\n\ncontract RenAssetProxyBeacon is ProxyBeacon {\n    string public constant NAME = \"RenAssetProxyBeacon\";\n\n    constructor(address implementation, address adminAddress) ProxyBeacon(implementation, adminAddress) {}\n}\n\ncontract MintGatewayProxyBeacon is ProxyBeacon {\n    string public constant NAME = \"MintGatewayProxyBeacon\";\n\n    constructor(address implementation, address adminAddress) ProxyBeacon(implementation, adminAddress) {}\n}\n\ncontract LockGatewayProxyBeacon is ProxyBeacon {\n    string public constant NAME = \"LockGatewayProxyBeacon\";\n\n    constructor(address implementation, address adminAddress) ProxyBeacon(implementation, adminAddress) {}\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "src/GatewayRegistry/GatewayRegistryV3.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {AccessControlEnumerableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport {AccessControlUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {StringsUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {TransparentUpgradeableProxy} from \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\nimport {IMintGateway} from \"../Gateways/interfaces/IMintGateway.sol\";\nimport {ILockGateway} from \"../Gateways/interfaces/ILockGateway.sol\";\nimport {StringV1} from \"../libraries/StringV1.sol\";\nimport {RenAssetFactory} from \"./RenAssetFactory.sol\";\nimport {StringSet} from \"../libraries/StringSet.sol\";\nimport {GatewayRegistryStateV2, GatewayRegistryGettersV2, GatewayRegistryV2} from \"./GatewayRegistry.sol\";\n\n/// @dev if any new values are being added, GatewayRegistryStateV3 should\n/// be updated to have all the values from GatewayRegistryStateV2 instead of\n/// inheriting from it, to that values can be added before the __gap.\ncontract GatewayRegistryStateV3 is GatewayRegistryStateV2 {\n\n}\n\ncontract GatewayRegistryGettersV3 is GatewayRegistryGettersV2, GatewayRegistryStateV3 {}\n\n/// GatewayRegistry is a mapping from assets to their associated\n/// RenERC20 and Gateway contracts.\ncontract GatewayRegistryV3 is\n    Initializable,\n    AccessControlEnumerableUpgradeable,\n    RenAssetFactory,\n    GatewayRegistryStateV3,\n    GatewayRegistryGettersV3\n{\n    using StringSet for StringSet.Set;\n\n    string public constant NAME = \"GatewayRegistry\";\n    bytes32 public constant CAN_UPDATE_GATEWAYS = keccak256(\"CAN_UPDATE_GATEWAYS\");\n    bytes32 public constant CAN_ADD_GATEWAYS = keccak256(\"CAN_ADD_GATEWAYS\");\n\n    function __GatewayRegistry_init(\n        uint256 chainId_,\n        address signatureVerifier_,\n        address transferContract,\n        address renAssetProxyBeacon_,\n        address mintGatewayProxyBeacon_,\n        address lockGatewayProxyBeacon_,\n        address adminAddress,\n        address[] calldata gatewayDeployers\n    ) external initializer {\n        __AccessControlEnumerable_init();\n        __RenAssetFactory_init(renAssetProxyBeacon_, mintGatewayProxyBeacon_, lockGatewayProxyBeacon_);\n        _chainId = chainId_;\n        _signatureVerifier = signatureVerifier_;\n        _transferContract = transferContract;\n\n        AccessControlEnumerableUpgradeable._setupRole(AccessControlUpgradeable.DEFAULT_ADMIN_ROLE, adminAddress);\n        AccessControlEnumerableUpgradeable._setupRole(CAN_UPDATE_GATEWAYS, adminAddress);\n        AccessControlEnumerableUpgradeable._setupRole(CAN_ADD_GATEWAYS, adminAddress);\n        for (uint256 i = 0; i < gatewayDeployers.length; ++i) {\n            _setupRole(CAN_ADD_GATEWAYS, gatewayDeployers[i]);\n        }\n    }\n\n    /// @dev The symbol is included twice because strings have to be hashed\n    /// first in order to be used as a log index/topic.\n    event LogMintGatewayAdded(\n        string symbol,\n        address indexed token,\n        address indexed gatewayContract,\n        // Indexed versions of previous parameters.\n        string indexed indexedSymbol\n    );\n    event LogMintGatewayRemoved(\n        string symbol,\n        // Indexed versions of previous parameters.\n        string indexed indexedSymbol\n    );\n    event LogLockGatewayAdded(\n        string symbol,\n        address indexed token,\n        address indexed gatewayContract,\n        // Indexed versions of previous parameters.\n        string indexed indexedSymbol\n    );\n    event LogLockGatewayRemoved(\n        string symbol,\n        // Indexed versions of previous parameters.\n        string indexed indexedSymbol\n    );\n\n    event LogSignatureVerifierUpdated(address indexed oldSignatureVerifier, address indexed newSignatureVerifier);\n    event LogTransferContractUpdated(address indexed oldTransferContract, address indexed newTransferContract);\n\n    // MODIFIERS ///////////////////////////////////////////////////////////////\n\n    modifier onlyValidString(string calldata str_) {\n        require(StringV1.isValidString(str_), \"GatewayRegistry: empty or invalid string input\");\n        _;\n    }\n\n    function checkRoleVerbose(\n        bytes32 role,\n        string memory roleName,\n        address account\n    ) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"GatewayRegistry: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        roleName\n                    )\n                )\n            );\n        }\n    }\n\n    modifier onlyRoleVerbose(bytes32 role, string memory roleName) {\n        checkRoleVerbose(role, roleName, _msgSender());\n        _;\n    }\n\n    // GOVERNANCE //////////////////////////////////////////////////////////////\n\n    /// @notice Allow the owner to update the signature verifier contract.\n    ///\n    /// @param newSignatureVerifier The new verifier contract address.\n    function updateSignatureVerifier(address newSignatureVerifier)\n        external\n        onlyRoleVerbose(CAN_UPDATE_GATEWAYS, \"CAN_UPDATE_GATEWAYS\")\n    {\n        require(newSignatureVerifier != address(0x0), \"GatewayRegistry: invalid signature verifier\");\n        address oldSignatureVerifier = _signatureVerifier;\n        _signatureVerifier = newSignatureVerifier;\n        emit LogSignatureVerifierUpdated(oldSignatureVerifier, newSignatureVerifier);\n    }\n\n    /// @notice Allow the owner to update the TransferContract contract.\n    ///\n    /// @param newTransferContract The new TransferContract contract address.\n    function updateTransferContract(address newTransferContract)\n        external\n        onlyRoleVerbose(CAN_UPDATE_GATEWAYS, \"CAN_UPDATE_GATEWAYS\")\n    {\n        require(newTransferContract != address(0x0), \"GatewayRegistry: invalid transfer with log\");\n        address oldTransferContract = _transferContract;\n        _transferContract = newTransferContract;\n        emit LogTransferContractUpdated(oldTransferContract, newTransferContract);\n    }\n\n    // MINT GATEWAYS ///////////////////////////////////////////////////////////\n\n    /// @notice Allow the owner to set the Gateway contract for a given\n    ///         RenERC20 token contract.\n    ///\n    /// @param symbol A string that identifies the token and gateway pair.\n    /// @param renAsset The address of the RenERC20 token contract.\n    /// @param mintGateway The address of the Gateway contract.\n    function addMintGateway(\n        string calldata symbol,\n        address renAsset,\n        address mintGateway\n    ) public onlyValidString(symbol) onlyRoleVerbose(CAN_ADD_GATEWAYS, \"CAN_ADD_GATEWAYS\") {\n        if (mintGatewaySymbols.contains(symbol)) {\n            // If there is an existing gateway for the symbol, delete it. The\n            // caller must also have the CAN_UPDATE_GATEWAYS role.\n            removeMintGateway(symbol);\n        }\n\n        // Check that token, Gateway and symbol haven't already been registered.\n        if (StringV1.isNotEmpty(mintSymbolByToken[renAsset])) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"GatewayRegistry: \",\n                        symbol,\n                        \" token already registered as \",\n                        mintSymbolByToken[renAsset]\n                    )\n                )\n            );\n        }\n\n        // Add to list of gateways.\n        mintGatewaySymbols.add(symbol);\n\n        mintGatewayDetailsBySymbol[symbol] = GatewayDetails({token: renAsset, gateway: mintGateway});\n        mintSymbolByToken[renAsset] = symbol;\n\n        emit LogMintGatewayAdded(symbol, renAsset, mintGateway, symbol);\n    }\n\n    function deployMintGateway(\n        string calldata symbol,\n        address renAsset,\n        string calldata version\n    ) external onlyRoleVerbose(CAN_ADD_GATEWAYS, \"CAN_ADD_GATEWAYS\") {\n        if (mintGatewaySymbols.contains(symbol)) {\n            // Check role before expensive contract deployment.\n            checkRoleVerbose(CAN_UPDATE_GATEWAYS, \"CAN_UPDATE_GATEWAYS\", _msgSender());\n        }\n\n        address mintGateway = address(_deployMintGateway(symbol, getSignatureVerifier(), renAsset, version));\n        addMintGateway(symbol, renAsset, mintGateway);\n    }\n\n    function deployMintGatewayAndRenAsset(\n        string calldata symbol,\n        string calldata erc20Name,\n        string calldata erc20Symbol,\n        uint8 erc20Decimals,\n        string calldata version\n    ) external onlyRoleVerbose(CAN_ADD_GATEWAYS, \"CAN_ADD_GATEWAYS\") {\n        if (mintGatewaySymbols.contains(symbol)) {\n            // Check role before expensive contract deployment.\n            checkRoleVerbose(CAN_UPDATE_GATEWAYS, \"CAN_UPDATE_GATEWAYS\", _msgSender());\n        }\n\n        address renAsset = address(\n            _deployRenAsset(getChainId(), symbol, erc20Name, erc20Symbol, erc20Decimals, version)\n        );\n        address mintGateway = address(_deployMintGateway(symbol, getSignatureVerifier(), renAsset, version));\n        OwnableUpgradeable(renAsset).transferOwnership(mintGateway);\n        addMintGateway(symbol, renAsset, mintGateway);\n    }\n\n    /// @notice Allows the owner to remove the Gateway contract for a given\n    ///         RenERC20 contract.\n    ///\n    /// @param symbol The symbol of the token to deregister.\n    function removeMintGateway(string calldata symbol)\n        public\n        onlyRoleVerbose(CAN_UPDATE_GATEWAYS, \"CAN_UPDATE_GATEWAYS\")\n    {\n        address renAsset = mintGatewayDetailsBySymbol[symbol].token;\n        require(renAsset != address(0x0), \"GatewayRegistry: gateway not registered\");\n\n        // Remove token and Gateway contract\n        delete mintSymbolByToken[renAsset];\n        delete mintGatewayDetailsBySymbol[symbol];\n        mintGatewaySymbols.remove(symbol);\n\n        emit LogMintGatewayRemoved(symbol, symbol);\n    }\n\n    // LOCK GATEWAYS ///////////////////////////////////////////////////////////\n\n    /// @notice Allow the owner to set the Gateway contract for a given\n    ///         RenERC20 token contract.\n    ///\n    /// @param symbol A string that identifies the token and gateway pair.\n    /// @param lockAsset The address of the RenERC20 token contract.\n    /// @param lockGateway The address of the Gateway contract.\n    function addLockGateway(\n        string calldata symbol,\n        address lockAsset,\n        address lockGateway\n    ) public onlyValidString(symbol) onlyRoleVerbose(CAN_ADD_GATEWAYS, \"CAN_ADD_GATEWAYS\") {\n        if (lockGatewaySymbols.contains(symbol)) {\n            // If there is an existing gateway for the symbol, delete it. The\n            // caller must also have the CAN_UPDATE_GATEWAYS role.\n            removeLockGateway(symbol);\n        }\n\n        // Check that token hasn't already been registered.\n        if (StringV1.isNotEmpty(lockSymbolByToken[lockAsset])) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"GatewayRegistry: \",\n                        symbol,\n                        \" token already registered as \",\n                        lockSymbolByToken[lockAsset]\n                    )\n                )\n            );\n        }\n\n        // Add to list of gateways.\n        lockGatewaySymbols.add(symbol);\n\n        lockGatewayDetailsBySymbol[symbol] = GatewayDetails({token: lockAsset, gateway: lockGateway});\n        lockSymbolByToken[lockAsset] = symbol;\n\n        emit LogLockGatewayAdded(symbol, lockAsset, lockGateway, symbol);\n    }\n\n    function deployLockGateway(\n        string calldata symbol,\n        address lockToken,\n        string calldata version\n    ) external onlyRoleVerbose(CAN_ADD_GATEWAYS, \"CAN_ADD_GATEWAYS\") {\n        if (lockGatewaySymbols.contains(symbol)) {\n            // Check role before expensive contract deployment.\n            checkRoleVerbose(CAN_UPDATE_GATEWAYS, \"CAN_UPDATE_GATEWAYS\", _msgSender());\n        }\n\n        address lockGateway = address(_deployLockGateway(symbol, getSignatureVerifier(), lockToken, version));\n        addLockGateway(symbol, lockToken, lockGateway);\n    }\n\n    /// @notice Allows the owner to remove the Gateway contract for a given\n    ///         asset contract.\n    ///\n    /// @param symbol The symbol of the token to deregister.\n    function removeLockGateway(string calldata symbol)\n        public\n        onlyRoleVerbose(CAN_UPDATE_GATEWAYS, \"CAN_UPDATE_GATEWAYS\")\n    {\n        require(lockGatewaySymbols.contains(symbol), \"GatewayRegistry: gateway not registered\");\n\n        address lockAsset = lockGatewayDetailsBySymbol[symbol].token;\n\n        // Remove token and Gateway contract\n        delete lockSymbolByToken[lockAsset];\n        delete lockGatewayDetailsBySymbol[symbol];\n        lockGatewaySymbols.remove(symbol);\n\n        emit LogLockGatewayRemoved(symbol, symbol);\n    }\n}\n"
    },
    "src/libraries/StringV1.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\n/// Updates String.isAlphanumeric to allow underscores.\nlibrary StringV1 {\n    /// Check that the string only contains alphanumeric characters (and\n    /// underscores), to avoid UTF-8 characters that are indistinguishable from\n    /// alphanumeric characters.\n    function isAlphanumeric(string memory str) internal pure returns (bool) {\n        for (uint256 i = 0; i < bytes(str).length; i++) {\n            uint8 char = uint8(bytes(str)[i]);\n            if (\n                !((char >= 65 && char <= 90) || (char >= 97 && char <= 122) || (char >= 48 && char <= 57) || char == 95)\n            ) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /// Check that the string has at least one character.\n    function isNotEmpty(string memory str) internal pure returns (bool) {\n        return bytes(str).length > 0;\n    }\n\n    /// Check that the string is not empty and only has alphanumeric characters.\n    function isValidString(string memory str) internal pure returns (bool) {\n        return isNotEmpty(str) && isAlphanumeric(str);\n    }\n}\n"
    },
    "src/Protocol/ClaimRewards.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.7;\n\nimport {TransparentUpgradeableProxy} from \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {StringsUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\n\nimport {StringV1} from \"../libraries/StringV1.sol\";\nimport {IClaimRewards} from \"./IClaimRewards.sol\";\n\ncontract ClaimRewardsStateV1 {\n    uint256 internal _nextClaimNonce;\n\n    uint256[49] private __gap;\n}\n\ncontract ClaimRewardsV1 is Initializable, ClaimRewardsStateV1, IClaimRewards {\n    uint256 public constant BPS_DENOMINATOR = 10000;\n\n    event LogClaimRewards(\n        uint256 indexed claimNonce,\n        address indexed operatorAddress,\n        string assetSymbol,\n        string recipientAddress,\n        string recipientChain,\n        bytes recipientPayload,\n        uint256 fractionInBps,\n        // Repeated values for indexing.\n        string indexed assetSymbolIndexed\n    );\n\n    function __ClaimRewards_init() public initializer {}\n\n    function getNextClaimNonce() public view returns (uint256) {\n        return _nextClaimNonce;\n    }\n\n    /**\n     * claimRewardsToChain allows darknode operators to withdraw darknode\n     * earnings, as an on-chain alternative to the JSON-RPC claim method.\n     *\n     * It will the operators total sum of rewards, for all of their nodes.\n     *\n     * @param assetSymbol The token symbol being claimed (e.g. \"BTC\", \"DOGE\" or\n     *        \"FIL\").\n     * @param recipientAddress An address on the asset's native chain, for\n     *        receiving the withdrawn rewards. This should be a string as\n     *        provided by the user - no encoding or decoding required.\n     *        E.g.: \"miMi2VET41YV1j6SDNTeZoPBbmH8B4nEx6\" for BTC.\n     * @param recipientChain A string indicating which chain the rewards should\n     *        be withdrawn to. It should be the name of the chain as expected by\n     *        RenVM (e.g. \"Ethereum\" or \"Solana\"). Support for different chains\n     *        will be rolled out after this contract is deployed, starting with\n     *        \"Ethereum\", then other host chains (e.g. \"Polygon\" or \"Solana\")\n     *        and then lock chains (e.g. \"Bitcoin\" for \"BTC\"), also represented\n     *        by an empty string \"\".\n     * @param recipientPayload An associated payload that can be provided along\n     *        with the recipient chain and address. Should be empty if not\n     *        required.\n     * @param fractionInBps A value between 0 and 10000 (inclusive) that\n     *        indicates the percent to withdraw from each of the operator's\n     *        darknodes. The value should be in BPS (e.g. 10000 represents 100%,\n     *        and 5000 represents 50%).\n     */\n    function claimRewardsToChain(\n        string memory assetSymbol,\n        string memory recipientAddress,\n        string memory recipientChain,\n        bytes memory recipientPayload,\n        uint256 fractionInBps\n    ) public returns (uint256) {\n        // Validate asset symbol.\n        require(StringV1.isNotEmpty(assetSymbol), \"ClaimRewards: invalid empty asset\");\n        require(StringV1.isAlphanumeric(assetSymbol), \"ClaimRewards: invalid asset\");\n\n        // Validate recipient address.\n        require(StringV1.isNotEmpty(recipientAddress), \"ClaimRewards: invalid empty recipient address\");\n        require(StringV1.isAlphanumeric(recipientAddress), \"ClaimRewards: invalid recipient address\");\n\n        // Validate recipient chain.\n        // Note that the chain can be empty - which is planned to represent the\n        // asset's native lock chain.\n        require(StringV1.isAlphanumeric(recipientChain), \"ClaimRewards: invalid recipient chain\");\n\n        // Validate the fraction being withdrawn.\n        require(fractionInBps <= BPS_DENOMINATOR, \"ClaimRewards: invalid fraction value greater than 10000\");\n\n        address operatorAddress = msg.sender;\n\n        uint256 nonce = getNextClaimNonce();\n        _nextClaimNonce = nonce + 1;\n\n        // Emit event.\n        emit LogClaimRewards(\n            nonce,\n            operatorAddress,\n            assetSymbol,\n            recipientAddress,\n            recipientChain,\n            recipientPayload,\n            fractionInBps,\n            // Indexed\n            assetSymbol\n        );\n\n        return nonce;\n    }\n\n    /**\n     * `claimRewardsToEthereum` calls `claimRewardsToChain` internally,\n     * converting the recipientAddress to a string and providing an empty\n     * payload.\n     */\n    function claimRewardsToEthereum(\n        string memory assetSymbol,\n        address recipientAddress,\n        uint256 fractionInBps\n    ) public override returns (uint256) {\n        return\n            claimRewardsToChain(\n                assetSymbol,\n                StringsUpgradeable.toHexString(uint160(recipientAddress), 20),\n                \"Ethereum\",\n                \"\",\n                fractionInBps\n            );\n    }\n}\n\ncontract ClaimRewardsProxy is TransparentUpgradeableProxy {\n    constructor(\n        address logic,\n        address admin,\n        bytes memory data\n    ) TransparentUpgradeableProxy(logic, admin, data) {}\n}\n"
    },
    "src/Protocol/IClaimRewards.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.7;\n\ninterface IClaimRewards {\n    /**\n     * `claimRewardsToEthereum` triggers a withdrawal of a darknode operator's\n     * rewards. `claimRewardsToEthereum` must be called by the operator\n     * performing the withdrawals. When RenVM sees the claim, it will produce a\n     * signature which needs to be submitted to the asset's Ren Gateway contract\n     * on Ethereum.\n     *\n     * @param assetSymbol The token symbol being claimed (e.g. \"BTC\", \"DOGE\" or\n     *        \"FIL\").\n     * @param recipientAddress The Ethereum address to which the assets are\n     *        being withdrawn to.\n     * @param fractionInBps A value between 0 and 10000 (inclusive) that\n     *        indicates the percent to withdraw from each of the operator's\n     *        darknodes. The value should be in BPS (e.g. 10000 represents 100%,\n     *        and 5000 represents 50%).\n     */\n    function claimRewardsToEthereum(\n        string memory assetSymbol,\n        address recipientAddress,\n        uint256 fractionInBps\n    ) external returns (uint256);\n}\n"
    },
    "src/Gateways/common/GatewayStateV4.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nimport {ContextUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport {IRenVMSignatureVerifier} from \"../RenVMSignatureVerifier.sol\";\nimport {StringV1} from \"../../libraries/StringV1.sol\";\nimport {RenVMHashes} from \"./RenVMHashes.sol\";\n\nabstract contract GatewayStateV4 {\n    // Selector hash details.\n    string internal _asset;\n    bytes32 internal _selectorHash;\n\n    /// @notice Each signature can only be seen once.\n    mapping(bytes32 => bool) internal _status;\n\n    /// @notice Each Gateway is tied to a specific asset.\n    address internal _token;\n\n    IRenVMSignatureVerifier internal _signatureVerifier;\n\n    address internal _previousGateway;\n\n    uint256 internal _eventNonce;\n\n    // Leave a gap so that storage values added in future upgrages don't corrupt\n    // the storage of contracts that inherit from this contract.\n    uint256[43] private __gap;\n}\n\nabstract contract GatewayStateManagerV4 is Initializable, ContextUpgradeable, GatewayStateV4 {\n    event LogAssetUpdated(string asset, bytes32 indexed selectorHash);\n    event LogTokenUpdated(address indexed token);\n    event LogSignatureVerifierUpdated(address indexed oldSignatureVerifier, address indexed newSignatureVerifier);\n    event LogPreviousGatewayUpdated(address indexed oldPreviousGateway, address indexed newPreviousGateway);\n    event LogEventNonceOverriden(uint256 oldEventNonce, uint256 newEventNonce);\n\n    function __GatewayStateManager_init(\n        string calldata asset_,\n        address signatureVerifier_,\n        address token_\n    ) public initializer {\n        __Context_init();\n        _updateSignatureVerifier(signatureVerifier_);\n        _updateAsset(asset_);\n        _updateToken(token_);\n    }\n\n    // GETTERS /////////////////////////////////////////////////////////////////\n\n    function getAsset() public view returns (string memory) {\n        return _asset;\n    }\n\n    function getSelectorHash() public view returns (bytes32) {\n        require(_selectorHash != bytes32(0x0), \"Gateway: not initialized\");\n        return _selectorHash;\n    }\n\n    function getToken() public view returns (address) {\n        return _token;\n    }\n\n    function getSignatureVerifier() public view returns (IRenVMSignatureVerifier) {\n        return _signatureVerifier;\n    }\n\n    function getPreviousGateway() public view returns (address) {\n        return _previousGateway;\n    }\n\n    function getEventNonce() public view returns (uint256) {\n        return _eventNonce;\n    }\n\n    // Backwards compatibility.\n    function token() public view returns (address) {\n        return getToken();\n    }\n\n    // GOVERNANCE //////////////////////////////////////////////////////////////\n\n    /// @notice The Gateway is controlled by the owner of the SignatureVerifier.\n    /// This allows for the owner of every Gateway to be updated with a single\n    /// update to the SignatureVerifier contract.\n    function owner() public view returns (address) {\n        return OwnableUpgradeable(address(getSignatureVerifier())).owner();\n    }\n\n    modifier onlySignatureVerifierOwner() {\n        require(owner() == _msgSender(), \"Gateway: caller is not the owner\");\n        _;\n    }\n\n    /// @notice Allow the owner to update the asset.\n    ///\n    /// @param nextAsset The new asset.\n    function updateAsset(string calldata nextAsset) public onlySignatureVerifierOwner {\n        _updateAsset(nextAsset);\n    }\n\n    /// @notice Allow the owner to update the signature verifier contract.\n    ///\n    /// @param newSignatureVerifier The new verifier contract address.\n    function updateSignatureVerifier(address newSignatureVerifier) public onlySignatureVerifierOwner {\n        _updateSignatureVerifier(newSignatureVerifier);\n    }\n\n    /// @notice Allow the owner to update the ERC20 token contract.\n    ///\n    /// @param newToken The new ERC20 token contract's address.\n    function updateToken(address newToken) public onlySignatureVerifierOwner {\n        _updateToken(newToken);\n    }\n\n    /// @notice Allow the owner to update the previous gateway used for\n    /// backwards compatibility.\n    ///\n    /// @param newPreviousGateway The new gateway contract's address.\n    function updatePreviousGateway(address newPreviousGateway) external onlySignatureVerifierOwner {\n        require(address(newPreviousGateway) != address(0x0), \"Gateway: invalid address\");\n        address oldPreviousGateway = _previousGateway;\n        _previousGateway = newPreviousGateway;\n        emit LogPreviousGatewayUpdated(oldPreviousGateway, newPreviousGateway);\n    }\n\n    // PREVIOUS GATEWAY ////////////////////////////////////////////////////////\n\n    modifier onlyPreviousGateway() {\n        address previousGateway_ = getPreviousGateway();\n\n        // If there's no previous gateway, the second require should also fail,\n        // but this require will provide a more informative reason.\n        require(previousGateway_ != address(0x0), \"Gateway: no previous gateway\");\n\n        require(_msgSender() == previousGateway_, \"Gateway: not authorized\");\n        _;\n    }\n\n    function status(bytes32 hash) public view returns (bool) {\n        if (_status[hash]) {\n            return true;\n        }\n\n        address previousGateway_ = getPreviousGateway();\n        if (previousGateway_ != address(0x0)) {\n            return GatewayStateManagerV4(previousGateway_).status(hash);\n        }\n\n        return false;\n    }\n\n    /// @notice Allow the owner to update the previous gateway used for\n    /// backwards compatibility.\n    ///\n    /// @param newEventNonce The new gateway contract's address.\n    function overrideEventNonce(uint256 newEventNonce) external onlySignatureVerifierOwner {\n        uint256 oldEventNonce = _eventNonce;\n        require(newEventNonce > oldEventNonce, \"Gateway: overriden nonce must be greater than old nonce\");\n        _eventNonce = newEventNonce;\n        emit LogEventNonceOverriden(oldEventNonce, newEventNonce);\n    }\n\n    // INTERNAL ////////////////////////////////////////////////////////////////\n\n    /// @notice Allow the owner to update the asset.\n    ///\n    /// @param nextAsset The new asset.\n    function _updateAsset(string calldata nextAsset) internal {\n        require(StringV1.isValidString(nextAsset), \"Gateway: invalid asset\");\n\n        _asset = nextAsset;\n\n        bytes32 newSelectorHash = RenVMHashes.calculateSelectorHash(nextAsset, getSignatureVerifier().getChain());\n        _selectorHash = newSelectorHash;\n        emit LogAssetUpdated(nextAsset, newSelectorHash);\n    }\n\n    /// @notice Allow the owner to update the signature verifier contract.\n    ///\n    /// @param newSignatureVerifier The new verifier contract address.\n    function _updateSignatureVerifier(address newSignatureVerifier) internal {\n        require(address(newSignatureVerifier) != address(0x0), \"Gateway: invalid signature verifier\");\n        address oldSignatureVerifier = address(_signatureVerifier);\n        _signatureVerifier = IRenVMSignatureVerifier(newSignatureVerifier);\n        emit LogSignatureVerifierUpdated(oldSignatureVerifier, newSignatureVerifier);\n    }\n\n    /// @notice Allow the owner to update the ERC20 token contract.\n    ///\n    /// @param newToken The new ERC20 token contract's address.\n    function _updateToken(address newToken) internal {\n        require(address(newToken) != address(0x0), \"Gateway: invalid token\");\n        _token = newToken;\n        emit LogTokenUpdated(newToken);\n    }\n}\n"
    },
    "src/Gateways/RenVMSignatureVerifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {ContextUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {TransparentUpgradeableProxy} from \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport {IERC1271} from \"@openzeppelin/contracts/interfaces/IERC1271.sol\";\n\ninterface IRenVMSignatureVerifier is IERC1271 {\n    // See IERC1271\n\n    function getChain() external view returns (string memory);\n\n    function getMintAuthority() external view returns (address);\n}\n\ncontract RenVMSignatureVerifierStateV1 {\n    string internal _chain;\n    address internal _mintAuthority;\n\n    // Leave a gap so that storage values added in future upgrages don't corrupt\n    // the storage of contracts that inherit from this contract.\n    uint256[48] private __gap;\n}\n\n// ERC-1271 uses 4-byte value instead of a boolean so that if a bug causes\n// another function to be called (e.g. by proxy misconfiguration or fallbacks),\n// a truthy value would not be interpreted as a successful check.\n// See https://github.com/ethereum/EIPs/issues/1271#issuecomment-442328339.\nbytes4 constant CORRECT_SIGNATURE_RETURN_VALUE_ = 0x1626ba7e;\n\ncontract RenVMSignatureVerifierV1 is\n    Initializable,\n    ContextUpgradeable,\n    OwnableUpgradeable,\n    RenVMSignatureVerifierStateV1,\n    IERC1271,\n    IRenVMSignatureVerifier\n{\n    string public constant NAME = \"RenVMSignatureVerifier\";\n\n    event LogMintAuthorityUpdated(address indexed mintAuthority);\n\n    // bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")\n    bytes4 public constant CORRECT_SIGNATURE_RETURN_VALUE = 0x1626ba7e; // CORRECT_SIGNATURE_RETURN_VALUE_\n    bytes4 public constant INCORRECT_SIGNATURE_RETURN_VALUE = 0x000000;\n\n    function __RenVMSignatureVerifier_init(\n        string calldata chain_,\n        address mintAuthority_,\n        address contractOwner\n    ) external initializer {\n        __Context_init();\n        __Ownable_init();\n        _chain = chain_;\n        updateMintAuthority(mintAuthority_);\n\n        if (owner() != contractOwner) {\n            transferOwnership(contractOwner);\n        }\n    }\n\n    function getChain() public view override returns (string memory) {\n        return _chain;\n    }\n\n    function getMintAuthority() public view override returns (address) {\n        return _mintAuthority;\n    }\n\n    // GOVERNANCE //////////////////////////////////////////////////////////////\n\n    modifier onlyOwnerOrMintAuthority() {\n        require(_msgSender() == owner() || _msgSender() == getMintAuthority(), \"SignatureVerifier: not authorized\");\n        _;\n    }\n\n    /// @notice Allow the owner or mint authority to update the mint authority.\n    ///\n    /// @param nextMintAuthority The new mint authority address.\n    function updateMintAuthority(address nextMintAuthority) public onlyOwnerOrMintAuthority {\n        require(nextMintAuthority != address(0), \"SignatureVerifier: mintAuthority cannot be set to address zero\");\n        _mintAuthority = nextMintAuthority;\n        emit LogMintAuthorityUpdated(_mintAuthority);\n    }\n\n    // PUBLIC //////////////////////////////////////////////////////////////////\n\n    /// @notice verifySignature checks the the provided signature matches the\n    /// provided parameters. Returns a 4-byte value as defined by ERC1271.\n    function isValidSignature(bytes32 sigHash, bytes calldata signature) external view override returns (bytes4) {\n        address mintAuthority_ = getMintAuthority();\n        require(mintAuthority_ != address(0x0), \"SignatureVerifier: mintAuthority not initialized\");\n        if (mintAuthority_ == ECDSA.recover(sigHash, signature)) {\n            return CORRECT_SIGNATURE_RETURN_VALUE;\n        } else {\n            return INCORRECT_SIGNATURE_RETURN_VALUE;\n        }\n    }\n}\n\ncontract RenVMSignatureVerifierProxy is TransparentUpgradeableProxy {\n    constructor(\n        address logic,\n        address admin,\n        bytes memory data\n    ) payable TransparentUpgradeableProxy(logic, admin, data) {}\n}\n"
    },
    "src/Gateways/common/RenVMHashes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nlibrary RenVMHashes {\n    /// @notice calculateSelectorHash calculates and hashes the selector hash,\n    ///         which is formatted as `ASSET/toCHAIN`.\n    function calculateSelectorHash(string memory assetSymbol, string memory chain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(assetSymbol, \"/to\", chain));\n    }\n\n    /// @notice calculateSigHash hashes the parameters to reconstruct the data\n    ///         signed by RenVM.\n    function calculateSigHash(\n        bytes32 pHash,\n        uint256 amount,\n        bytes32 selectorHash,\n        address to,\n        bytes32 nHash\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encode(pHash, amount, selectorHash, to, nHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "src/testUtils/MigratedMintGateway.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport {RenAssetV2} from \"../RenAsset/RenAsset.sol\";\nimport {GatewayStateV3, GatewayStateManagerV3} from \"../Gateways/common/GatewayState.sol\";\nimport {RenVMHashes} from \"../Gateways/common/RenVMHashes.sol\";\nimport {IMintGateway} from \"../Gateways/interfaces/IMintGateway.sol\";\nimport {MintGatewayV3} from \"../Gateways/MintGateway.sol\";\nimport {CORRECT_SIGNATURE_RETURN_VALUE_} from \"../Gateways/RenVMSignatureVerifier.sol\";\n\n// TESTING CONTRACT\ncontract MigratedMintGateway is Initializable, GatewayStateV3, GatewayStateManagerV3, IMintGateway {\n    MintGatewayV3 public nextGateway;\n\n    function setNextGateway(address nextGateway_) public onlySignatureVerifierOwner {\n        nextGateway = MintGatewayV3(nextGateway_);\n    }\n\n    function mint(\n        bytes32 pHash,\n        uint256 amount,\n        bytes32 nHash,\n        bytes calldata sig\n    ) external override returns (uint256) {\n        return nextGateway._mintFromPreviousGateway(pHash, amount, nHash, sig, _msgSender());\n    }\n\n    function burnWithPayload(\n        string calldata recipientAddress,\n        string calldata recipientChain,\n        bytes calldata recipientPayload,\n        uint256 amount\n    ) external override returns (uint256) {\n        return\n            nextGateway._burnFromPreviousGateway(\n                recipientAddress,\n                recipientChain,\n                recipientPayload,\n                amount,\n                _msgSender()\n            );\n    }\n\n    function burn(string calldata recipient, uint256 amount) external virtual override returns (uint256) {\n        return nextGateway._burnFromPreviousGateway(recipient, \"\", \"\", amount, _msgSender());\n    }\n\n    function burn(bytes calldata recipient, uint256 amount) external virtual override returns (uint256) {\n        return nextGateway._burnFromPreviousGateway(string(recipient), \"\", \"\", amount, _msgSender());\n    }\n}\n"
    },
    "src/RenAsset/RenAsset.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {ERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport {StringsUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\n\nimport {ERC20WithPermit} from \"./ERC20WithPermit.sol\";\nimport {ERC20WithPermit} from \"./ERC20WithPermit.sol\";\nimport {StringV1} from \"../libraries/StringV1.sol\";\n\nabstract contract RenAssetStateV2 {\n    uint8 internal _decimals;\n\n    // Leave a gap so that storage values added in future upgrages don't corrupt\n    // the storage of contracts that inherit from this contract.\n    uint256[49] private __gap;\n}\n\n/// RenAsset represents a digital asset that has been bridged by RenVM. It\n/// exposes mint and burn functions that can only be called by it's associated\n/// MintGateway contract.\ncontract RenAssetV2 is Initializable, OwnableUpgradeable, ERC20Upgradeable, ERC20WithPermit, RenAssetStateV2 {\n    string public constant NAME = \"RenAsset\";\n\n    // If these parameters are changed, RenAssetFactory must be updated as well.\n    function __RenAsset_init(\n        uint256 chainId,\n        string calldata version_,\n        string calldata name_,\n        string calldata symbol_,\n        uint8 decimals_,\n        address contractOwner\n    ) external initializer {\n        require(StringV1.isValidString(version_), \"RenAsset: invalid version\");\n        require(StringV1.isValidString(name_), \"RenAsset: invalid name\");\n        require(StringV1.isValidString(symbol_), \"RenAsset: invalid symbol\");\n\n        __Ownable_init();\n        __ERC20_init(name_, symbol_);\n        __ERC20WithPermit_init(chainId, version_, name_, symbol_);\n\n        RenAssetStateV2._decimals = decimals_;\n\n        if (owner() != contractOwner) {\n            transferOwnership(contractOwner);\n        }\n    }\n\n    function decimals() public view override returns (uint8) {\n        return RenAssetStateV2._decimals;\n    }\n\n    /// @notice mint can only be called by the tokens' associated Gateway\n    /// contract. See Gateway's mint function instead.\n    function mint(address to, uint256 amount) external onlyOwner {\n        _mint(to, amount);\n    }\n\n    /// @notice burn can only be called by the tokens' associated Gateway\n    /// contract. See Gateway's burn functions instead.\n    function burn(address from, uint256 amount) external onlyOwner {\n        _burn(from, amount);\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        // Disallow sending tokens to the ERC20 contract address - a common\n        // mistake caused by the Ethereum transaction's `to` needing to be\n        // the token's address.\n        require(recipient != address(this), \"RenERC20: can't transfer to token address\");\n        return super.transfer(recipient, amount);\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        // Disallow sending tokens to the ERC20 contract address (see comment\n        // in `transfer`).\n        require(recipient != address(this), \"RenERC20: can't transfer to token address\");\n        return super.transferFrom(sender, recipient, amount);\n    }\n}\n"
    },
    "src/Gateways/common/GatewayState.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nimport {ContextUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport {IRenVMSignatureVerifier} from \"../RenVMSignatureVerifier.sol\";\nimport {StringV1} from \"../../libraries/StringV1.sol\";\nimport {RenVMHashes} from \"./RenVMHashes.sol\";\n\nabstract contract GatewayStateV3 {\n    // Selector hash details.\n    string internal _asset;\n    bytes32 internal _selectorHash;\n\n    /// @notice Each signature can only be seen once.\n    mapping(bytes32 => bool) internal _status;\n\n    /// @notice Each Gateway is tied to a specific asset.\n    address internal _token;\n\n    IRenVMSignatureVerifier internal _signatureVerifier;\n\n    address internal _previousGateway;\n\n    uint256 internal _eventNonce;\n\n    // Leave a gap so that storage values added in future upgrages don't corrupt\n    // the storage of contracts that inherit from this contract.\n    uint256[43] private __gap;\n}\n\nabstract contract GatewayStateManagerV3 is Initializable, ContextUpgradeable, GatewayStateV3 {\n    event LogAssetUpdated(string asset, bytes32 indexed selectorHash);\n    event LogTokenUpdated(address indexed token);\n    event LogSignatureVerifierUpdated(address indexed oldSignatureVerifier, address indexed newSignatureVerifier);\n    event LogPreviousGatewayUpdated(address indexed oldPreviousGateway, address indexed newPreviousGateway);\n\n    function __GatewayStateManager_init(\n        string calldata asset_,\n        address signatureVerifier_,\n        address token_\n    ) public initializer {\n        __Context_init();\n        _updateSignatureVerifier(signatureVerifier_);\n        _updateAsset(asset_);\n        _updateToken(token_);\n    }\n\n    // GETTERS /////////////////////////////////////////////////////////////////\n\n    function getAsset() public view returns (string memory) {\n        return _asset;\n    }\n\n    function getSelectorHash() public view returns (bytes32) {\n        require(_selectorHash != bytes32(0x0), \"Gateway: not initialized\");\n        return _selectorHash;\n    }\n\n    function getToken() public view returns (address) {\n        return _token;\n    }\n\n    function getSignatureVerifier() public view returns (IRenVMSignatureVerifier) {\n        return _signatureVerifier;\n    }\n\n    function getPreviousGateway() public view returns (address) {\n        return _previousGateway;\n    }\n\n    function getEventNonce() public view returns (uint256) {\n        return _eventNonce;\n    }\n\n    // Backwards compatibility.\n    function token() public view returns (address) {\n        return getToken();\n    }\n\n    // GOVERNANCE //////////////////////////////////////////////////////////////\n\n    /// @notice The Gateway is controlled by the owner of the SignatureVerifier.\n    /// This allows for the owner of every Gateway to be updated with a single\n    /// update to the SignatureVerifier contract.\n    function owner() public view returns (address) {\n        return OwnableUpgradeable(address(getSignatureVerifier())).owner();\n    }\n\n    modifier onlySignatureVerifierOwner() {\n        require(owner() == _msgSender(), \"Gateway: caller is not the owner\");\n        _;\n    }\n\n    /// @notice Allow the owner to update the asset.\n    ///\n    /// @param nextAsset The new asset.\n    function updateAsset(string calldata nextAsset) public onlySignatureVerifierOwner {\n        _updateAsset(nextAsset);\n    }\n\n    /// @notice Allow the owner to update the signature verifier contract.\n    ///\n    /// @param newSignatureVerifier The new verifier contract address.\n    function updateSignatureVerifier(address newSignatureVerifier) public onlySignatureVerifierOwner {\n        _updateSignatureVerifier(newSignatureVerifier);\n    }\n\n    /// @notice Allow the owner to update the ERC20 token contract.\n    ///\n    /// @param newToken The new ERC20 token contract's address.\n    function updateToken(address newToken) public onlySignatureVerifierOwner {\n        _updateToken(newToken);\n    }\n\n    /// @notice Allow the owner to update the previous gateway used for\n    /// backwards compatibility.\n    ///\n    /// @param newPreviousGateway The new gateway contract's address.\n    function updatePreviousGateway(address newPreviousGateway) external onlySignatureVerifierOwner {\n        require(address(newPreviousGateway) != address(0x0), \"Gateway: invalid address\");\n        address oldPreviousGateway = _previousGateway;\n        _previousGateway = newPreviousGateway;\n        emit LogPreviousGatewayUpdated(oldPreviousGateway, newPreviousGateway);\n    }\n\n    // PREVIOUS GATEWAY ////////////////////////////////////////////////////////\n\n    modifier onlyPreviousGateway() {\n        address previousGateway_ = getPreviousGateway();\n\n        // If there's no previous gateway, the second require should also fail,\n        // but this require will provide a more informative reason.\n        require(previousGateway_ != address(0x0), \"Gateway: no previous gateway\");\n\n        require(_msgSender() == previousGateway_, \"Gateway: not authorized\");\n        _;\n    }\n\n    function status(bytes32 hash) public view returns (bool) {\n        if (_status[hash]) {\n            return true;\n        }\n\n        address previousGateway_ = getPreviousGateway();\n        if (previousGateway_ != address(0x0)) {\n            return GatewayStateManagerV3(previousGateway_).status(hash);\n        }\n\n        return false;\n    }\n\n    // INTERNAL ////////////////////////////////////////////////////////////////\n\n    /// @notice Allow the owner to update the asset.\n    ///\n    /// @param nextAsset The new asset.\n    function _updateAsset(string calldata nextAsset) internal {\n        require(StringV1.isValidString(nextAsset), \"Gateway: invalid asset\");\n\n        _asset = nextAsset;\n\n        bytes32 newSelectorHash = RenVMHashes.calculateSelectorHash(nextAsset, getSignatureVerifier().getChain());\n        _selectorHash = newSelectorHash;\n        emit LogAssetUpdated(nextAsset, newSelectorHash);\n    }\n\n    /// @notice Allow the owner to update the signature verifier contract.\n    ///\n    /// @param newSignatureVerifier The new verifier contract address.\n    function _updateSignatureVerifier(address newSignatureVerifier) internal {\n        require(address(newSignatureVerifier) != address(0x0), \"Gateway: invalid signature verifier\");\n        address oldSignatureVerifier = address(_signatureVerifier);\n        _signatureVerifier = IRenVMSignatureVerifier(newSignatureVerifier);\n        emit LogSignatureVerifierUpdated(oldSignatureVerifier, newSignatureVerifier);\n    }\n\n    /// @notice Allow the owner to update the ERC20 token contract.\n    ///\n    /// @param newToken The new ERC20 token contract's address.\n    function _updateToken(address newToken) internal {\n        require(address(newToken) != address(0x0), \"Gateway: invalid token\");\n        _token = newToken;\n        emit LogTokenUpdated(newToken);\n    }\n}\n"
    },
    "src/Gateways/MintGateway.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {ContextUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport {AddressUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport {StringsUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\n\nimport {RenAssetV2} from \"../RenAsset/RenAsset.sol\";\nimport {GatewayStateV3, GatewayStateManagerV3} from \"./common/GatewayState.sol\";\nimport {RenVMHashes} from \"./common/RenVMHashes.sol\";\nimport {IMintGateway} from \"./interfaces/IMintGateway.sol\";\nimport {StringV1} from \"../libraries/StringV1.sol\";\nimport {CORRECT_SIGNATURE_RETURN_VALUE_} from \"./RenVMSignatureVerifier.sol\";\n\n/// MintGateway handles verifying mint and burn requests. A mintAuthority\n/// approves new assets to be minted by providing a digital signature. An owner\n/// of an asset can request for it to be burnt.\ncontract MintGatewayV3 is Initializable, ContextUpgradeable, GatewayStateV3, GatewayStateManagerV3, IMintGateway {\n    string public constant NAME = \"MintGateway\";\n\n    event TokenOwnershipTransferred(address indexed tokenAddress, address indexed nextTokenOwner);\n\n    // If these parameters are changed, RenAssetFactory must be updated as well.\n    function __MintGateway_init(\n        string calldata asset_,\n        address signatureVerifier_,\n        address token_\n    ) external initializer {\n        __Context_init();\n        __GatewayStateManager_init(asset_, signatureVerifier_, token_);\n    }\n\n    // Governance functions ////////////////////////////////////////////////////\n\n    /// @notice Allow the owner to update the owner of the RenERC20 token.\n    function transferTokenOwnership(address nextTokenOwner) external onlySignatureVerifierOwner {\n        require(AddressUpgradeable.isContract(nextTokenOwner), \"MintGateway: next token owner must be a contract\");\n        require(nextTokenOwner != address(0x0), \"MintGateway: invalid next token owner\");\n\n        address token_ = getToken();\n        RenAssetV2(token_).transferOwnership(address(nextTokenOwner));\n\n        emit TokenOwnershipTransferred(token_, nextTokenOwner);\n    }\n\n    // PUBLIC FUNCTIONS ////////////////////////////////////////////////////////\n\n    /// @notice mint verifies a mint approval signature from RenVM and creates\n    ///         tokens after taking a fee for the `_feeRecipient`.\n    ///\n    /// @param pHash (payload hash) The hash of the payload associated with the\n    ///        mint.\n    /// @param amount The amount of the token being minted, in its smallest\n    ///        value. (e.g. satoshis for BTC).\n    /// @param nHash (nonce hash) The hash of the nonce, amount and pHash.\n    /// @param sig The signature of the hash of the following values:\n    ///        (pHash, amount, recipient, nHash), signed by the mintAuthority.\n    function mint(\n        bytes32 pHash,\n        uint256 amount,\n        bytes32 nHash,\n        bytes calldata sig\n    ) external override returns (uint256) {\n        return _mint(pHash, amount, nHash, sig, _msgSender());\n    }\n\n    /// @notice burnWithPayload allows minted assets to be released to their\n    ///         native chain, or to another chain as specified by the chain and\n    ///         payload parameters.\n    ///         WARNING: Burning with invalid parameters can cause the funds to\n    ///         become unrecoverable.\n    ///\n    /// @param recipientAddress The address to which the locked assets will be\n    ///        minted to. The address should be a plain-text address, without\n    ///        decoding to bytes first.\n    /// @param recipientChain The target chain to which the assets are being\n    ///        moved to.\n    /// @param recipientPayload An optional payload to be passed to the\n    ///        recipient chain along with the address.\n    /// @param amount The amount of the token being locked, in the asset's\n    ///        smallest unit. (e.g. satoshis for BTC)\n    function burnWithPayload(\n        string calldata recipientAddress,\n        string calldata recipientChain,\n        bytes calldata recipientPayload,\n        uint256 amount\n    ) external override returns (uint256) {\n        return _burnWithPayload(recipientAddress, recipientChain, recipientPayload, amount, _msgSender());\n    }\n\n    /// @notice burn is a convenience function that is equivalent to calling\n    ///         `burnWithPayload` with an empty payload and chain, releasing\n    ///         the asset to the native chain.\n    function burn(string calldata recipient, uint256 amount) external virtual override returns (uint256) {\n        return _burnWithPayload(recipient, \"\", \"\", amount, _msgSender());\n    }\n\n    /// Same as `burn` with the recipient parameter being `bytes` instead of\n    /// a `string`. For backwards compatibility with the MintGatewayV2.\n    function burn(bytes calldata recipient, uint256 amount) external virtual override returns (uint256) {\n        return _burnWithPayload(string(recipient), \"\", \"\", amount, _msgSender());\n    }\n\n    function _mintFromPreviousGateway(\n        bytes32 pHash,\n        uint256 amount,\n        bytes32 nHash,\n        bytes calldata sig,\n        address caller\n    ) external onlyPreviousGateway returns (uint256) {\n        return _mint(pHash, amount, nHash, sig, caller);\n    }\n\n    function _burnFromPreviousGateway(\n        string calldata recipientAddress,\n        string calldata recipientChain,\n        bytes calldata recipientPayload,\n        uint256 amount,\n        address caller\n    ) external onlyPreviousGateway returns (uint256) {\n        return _burnWithPayload(string(recipientAddress), recipientChain, recipientPayload, amount, caller);\n    }\n\n    // INTERNAL FUNCTIONS //////////////////////////////////////////////////////\n\n    function _mint(\n        bytes32 pHash,\n        uint256 amount,\n        bytes32 nHash,\n        bytes memory sig,\n        address recipient\n    ) internal returns (uint256) {\n        // Calculate the hash signed by RenVM. This binds the payload hash,\n        // amount, recipient and nonce hash to the signature.\n        bytes32 sigHash = RenVMHashes.calculateSigHash(pHash, amount, getSelectorHash(), recipient, nHash);\n\n        // Check that the signature hasn't been redeemed.\n        require(!status(sigHash), \"MintGateway: signature already spent\");\n\n        // If the signature fails verification, throw an error.\n        // `isValidSignature` must return an exact bytes4 value, to avoid\n        // a contract mistakingly returning a truthy value without intending to.\n        if (getSignatureVerifier().isValidSignature(sigHash, sig) != CORRECT_SIGNATURE_RETURN_VALUE_) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"MintGateway: invalid signature. phash: \",\n                        StringsUpgradeable.toHexString(uint256(pHash), 32),\n                        \", amount: \",\n                        StringsUpgradeable.toString(amount),\n                        \", shash\",\n                        StringsUpgradeable.toHexString(uint256(getSelectorHash()), 32),\n                        \", msg.sender: \",\n                        StringsUpgradeable.toHexString(uint160(recipient), 20),\n                        \", nhash: \",\n                        StringsUpgradeable.toHexString(uint256(nHash), 32)\n                    )\n                )\n            );\n        }\n\n        // Update the status for the signature hash.\n        _status[sigHash] = true;\n\n        // Mint the amount to the recipient.\n        RenAssetV2(getToken()).mint(recipient, amount);\n\n        // Emit mint log. For backwards compatiblity reasons, the sigHash is\n        // cast to a uint256.\n        emit LogMint(recipient, amount, uint256(sigHash), nHash);\n\n        return amount;\n    }\n\n    /// @notice burn destroys tokens after taking a fee for the `_feeRecipient`,\n    ///         allowing the associated assets to be released on their native\n    ///         chain.\n    ///\n    /// @param recipientAddress The address to which the locked assets will be\n    ///        minted to. The address should be a plain-text address, without\n    ///        decoding to bytes first.\n    /// @param recipientChain The target chain to which the assets are being\n    ///        moved to.\n    /// @param recipientPayload An optional payload to be passed to the\n    ///        recipient chain along with the address.\n    /// @param amount The amount of the token being locked, in the asset's\n    ///        smallest unit. (e.g. satoshis for BTC)\n    function _burnWithPayload(\n        string memory recipientAddress,\n        string memory recipientChain,\n        bytes memory recipientPayload,\n        uint256 amount,\n        address caller\n    ) internal returns (uint256) {\n        // The recipient must not be empty. Better validation is possible,\n        // but would need to be customized for each destination ledger.\n        require(StringV1.isNotEmpty(recipientAddress), \"MintGateway: to address is empty\");\n\n        // Burn the tokens. If the user doesn't have enough tokens, this will\n        // throw.\n        RenAssetV2(getToken()).burn(caller, amount);\n\n        uint256 burnNonce = getEventNonce();\n\n        // If a paylaod of recipient chain has been included, emit more detailed\n        // event.\n        if (StringV1.isNotEmpty(recipientChain) || recipientPayload.length > 0) {\n            emit LogBurnToChain(\n                recipientAddress,\n                recipientChain,\n                recipientPayload,\n                amount,\n                burnNonce,\n                recipientAddress,\n                recipientChain\n            );\n        } else {\n            emit LogBurn(bytes(recipientAddress), amount, burnNonce, bytes(recipientAddress));\n        }\n\n        _eventNonce = burnNonce + 1;\n\n        return amount;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "src/RenAsset/ERC20WithPermit.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nimport {ERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nabstract contract ERC20WithPermitState {\n    mapping(address => uint256) internal _nonces;\n\n    // If the token is redeployed, the version is increased to prevent a permit\n    // signature being used on both token instances.\n    string internal _version;\n\n    // --- EIP712 niceties ---\n    bytes32 internal _domainSeparator;\n\n    // Leave a gap so that storage values added in future upgrages don't corrupt\n    // the storage of contracts that inherit from this contract.\n    uint256[47] private __gap;\n}\n\n/// Taken from the DAI token (https://github.com/makerdao/dss/blob/c8d4c806691dacb903ff281b81f316bea974e4c7/src/dai.sol)\n/// See also EIP-2612 (https://eips.ethereum.org/EIPS/eip-2612).\ncontract ERC20WithPermit is Initializable, ERC20Upgradeable, ERC20WithPermitState {\n    // PERMIT_TYPEHASH is the value returned from\n    // keccak256(\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\")\n    bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\n\n    function __ERC20WithPermit_init(\n        uint256 chainId,\n        string calldata version_,\n        string calldata name_,\n        string calldata symbol_\n    ) public initializer {\n        __ERC20_init(name_, symbol_);\n        _version = version_;\n        _domainSeparator = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name())),\n                keccak256(bytes(version_)),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    function nonces(address holder) public view returns (uint256) {\n        return _nonces[holder];\n    }\n\n    function version() external view returns (string memory) {\n        return _version;\n    }\n\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\n        return _domainSeparator;\n    }\n\n    // --- Approve by signature ---\n    function permit(\n        address holder,\n        address spender,\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR(),\n                keccak256(abi.encode(PERMIT_TYPEHASH, holder, spender, nonce, expiry, allowed))\n            )\n        );\n\n        require(holder != address(0), \"ERC20WithRate: address must not be 0x0\");\n        require(holder == ecrecover(digest, v, r, s), \"ERC20WithRate: invalid signature\");\n        require(expiry == 0 || block.timestamp <= expiry, \"ERC20WithRate: permit has expired\");\n        require(nonce == nonces(holder), \"ERC20WithRate: invalid nonce\");\n        _nonces[holder] = nonce + 1;\n        uint256 amount = allowed ? uint256(int256(-1)) : 0;\n\n        // Approve\n        _approve(holder, spender, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "src/testUtils/TestToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestToken is ERC20 {\n    string public constant DESCRIPTION = \"Test token used by testnet RenVM - https://docs.renproject.io/\";\n\n    uint8 internal _decimals;\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_,\n        uint256 totalSupply_,\n        address totalSupplyRecipient\n    ) ERC20(name_, symbol_) {\n        _decimals = decimals_;\n        ERC20._mint(totalSupplyRecipient, totalSupply_);\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n}\n"
    },
    "src/TransferWithLog.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\n/// TransferWithLog is a replacement for a standard ETH transfer, with an added\n/// log to make it easily searchable.\ncontract TransferWithLog is Context {\n    string public constant NAME = \"TransferWithLog\";\n\n    event LogTransferred(address indexed from, address indexed to, uint256 amount);\n\n    function transferWithLog(address payable to) external payable {\n        require(to != address(0x0), \"TransferWithLog: invalid empty recipient\");\n        uint256 amount = msg.value;\n        // `call` is used instead of `transfer` or `send` to avoid a hard-coded\n        // gas limit.\n        // See https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/\n        (bool sent, ) = to.call{value: amount}(\"\");\n        require(sent, \"TransferWithLog: transfer failed\");\n        emit LogTransferred(_msgSender(), to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/TimelockController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../access/AccessControl.sol\";\n\n/**\n * @dev Contract module which acts as a timelocked controller. When set as the\n * owner of an `Ownable` smart contract, it enforces a timelock on all\n * `onlyOwner` maintenance operations. This gives time for users of the\n * controlled contract to exit before a potentially dangerous maintenance\n * operation is applied.\n *\n * By default, this contract is self administered, meaning administration tasks\n * have to go through the timelock process. The proposer (resp executor) role\n * is in charge of proposing (resp executing) operations. A common use case is\n * to position this {TimelockController} as the owner of a smart contract, with\n * a multisig or a DAO as the sole proposer.\n *\n * _Available since v3.3._\n */\ncontract TimelockController is AccessControl {\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\"TIMELOCK_ADMIN_ROLE\");\n    bytes32 public constant PROPOSER_ROLE = keccak256(\"PROPOSER_ROLE\");\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR_ROLE\");\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\n\n    mapping(bytes32 => uint256) private _timestamps;\n    uint256 private _minDelay;\n\n    /**\n     * @dev Emitted when a call is scheduled as part of operation `id`.\n     */\n    event CallScheduled(\n        bytes32 indexed id,\n        uint256 indexed index,\n        address target,\n        uint256 value,\n        bytes data,\n        bytes32 predecessor,\n        uint256 delay\n    );\n\n    /**\n     * @dev Emitted when a call is performed as part of operation `id`.\n     */\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\n\n    /**\n     * @dev Emitted when operation `id` is cancelled.\n     */\n    event Cancelled(bytes32 indexed id);\n\n    /**\n     * @dev Emitted when the minimum delay for future operations is modified.\n     */\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\n\n    /**\n     * @dev Initializes the contract with a given `minDelay`.\n     */\n    constructor(\n        uint256 minDelay,\n        address[] memory proposers,\n        address[] memory executors\n    ) {\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\n\n        // deployer + self administration\n        _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\n\n        // register proposers\n        for (uint256 i = 0; i < proposers.length; ++i) {\n            _setupRole(PROPOSER_ROLE, proposers[i]);\n        }\n\n        // register executors\n        for (uint256 i = 0; i < executors.length; ++i) {\n            _setupRole(EXECUTOR_ROLE, executors[i]);\n        }\n\n        _minDelay = minDelay;\n        emit MinDelayChange(0, minDelay);\n    }\n\n    /**\n     * @dev Modifier to make a function callable only by a certain role. In\n     * addition to checking the sender's role, `address(0)` 's role is also\n     * considered. Granting a role to `address(0)` is equivalent to enabling\n     * this role for everyone.\n     */\n    modifier onlyRoleOrOpenRole(bytes32 role) {\n        if (!hasRole(role, address(0))) {\n            _checkRole(role, _msgSender());\n        }\n        _;\n    }\n\n    /**\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\n     */\n    receive() external payable {}\n\n    /**\n     * @dev Returns whether an id correspond to a registered operation. This\n     * includes both Pending, Ready and Done operations.\n     */\n    function isOperation(bytes32 id) public view virtual returns (bool pending) {\n        return getTimestamp(id) > 0;\n    }\n\n    /**\n     * @dev Returns whether an operation is pending or not.\n     */\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\n        return getTimestamp(id) > _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns whether an operation is ready or not.\n     */\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\n        uint256 timestamp = getTimestamp(id);\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\n    }\n\n    /**\n     * @dev Returns whether an operation is done or not.\n     */\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\n        return getTimestamp(id) == _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\n     * unset operations, 1 for done operations).\n     */\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\n        return _timestamps[id];\n    }\n\n    /**\n     * @dev Returns the minimum delay for an operation to become valid.\n     *\n     * This value can be changed by executing an operation that calls `updateDelay`.\n     */\n    function getMinDelay() public view virtual returns (uint256 duration) {\n        return _minDelay;\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a single\n     * transaction.\n     */\n    function hashOperation(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32 hash) {\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a batch of\n     * transactions.\n     */\n    function hashOperationBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata datas,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32 hash) {\n        return keccak256(abi.encode(targets, values, datas, predecessor, salt));\n    }\n\n    /**\n     * @dev Schedule an operation containing a single transaction.\n     *\n     * Emits a {CallScheduled} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function schedule(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _schedule(id, delay);\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\n    }\n\n    /**\n     * @dev Schedule an operation containing a batch of transactions.\n     *\n     * Emits one {CallScheduled} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function scheduleBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata datas,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == datas.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\n        _schedule(id, delay);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            emit CallScheduled(id, i, targets[i], values[i], datas[i], predecessor, delay);\n        }\n    }\n\n    /**\n     * @dev Schedule an operation that is to becomes valid after a given delay.\n     */\n    function _schedule(bytes32 id, uint256 delay) private {\n        require(!isOperation(id), \"TimelockController: operation already scheduled\");\n        require(delay >= getMinDelay(), \"TimelockController: insufficient delay\");\n        _timestamps[id] = block.timestamp + delay;\n    }\n\n    /**\n     * @dev Cancel an operation.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function cancel(bytes32 id) public virtual onlyRole(PROPOSER_ROLE) {\n        require(isOperationPending(id), \"TimelockController: operation cannot be cancelled\");\n        delete _timestamps[id];\n\n        emit Cancelled(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a single transaction.\n     *\n     * Emits a {CallExecuted} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    function execute(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _beforeCall(id, predecessor);\n        _call(id, 0, target, value, data);\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a batch of transactions.\n     *\n     * Emits one {CallExecuted} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    function executeBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata datas,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == datas.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\n        _beforeCall(id, predecessor);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            _call(id, i, targets[i], values[i], datas[i]);\n        }\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Checks before execution of an operation's calls.\n     */\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \"TimelockController: missing dependency\");\n    }\n\n    /**\n     * @dev Checks after execution of an operation's calls.\n     */\n    function _afterCall(bytes32 id) private {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        _timestamps[id] = _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Execute an operation's call.\n     *\n     * Emits a {CallExecuted} event.\n     */\n    function _call(\n        bytes32 id,\n        uint256 index,\n        address target,\n        uint256 value,\n        bytes calldata data\n    ) private {\n        (bool success, ) = target.call{value: value}(data);\n        require(success, \"TimelockController: underlying transaction reverted\");\n\n        emit CallExecuted(id, index, target, value, data);\n    }\n\n    /**\n     * @dev Changes the minimum timelock duration for future operations.\n     *\n     * Emits a {MinDelayChange} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\n     */\n    function updateDelay(uint256 newDelay) external virtual {\n        require(msg.sender == address(this), \"TimelockController: caller must be timelock\");\n        emit MinDelayChange(_minDelay, newDelay);\n        _minDelay = newDelay;\n    }\n}\n"
    },
    "src/RenTimelock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nimport {TimelockController} from \"@openzeppelin/contracts/governance/TimelockController.sol\";\n\n/// See TimelockController.\ncontract RenTimelock is TimelockController {\n    string public constant NAME = \"RenTimelock\";\n\n    constructor(\n        uint256 minDelay,\n        address[] memory proposers,\n        address[] memory executors\n    ) TimelockController(minDelay, proposers, executors) {}\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {grantRole} to track enumerable memberships\n     */\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        super.grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {revokeRole} to track enumerable memberships\n     */\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        super.revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {renounceRole} to track enumerable memberships\n     */\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        super.renounceRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {_setupRole} to track enumerable memberships\n     */\n    function _setupRole(bytes32 role, address account) internal virtual override {\n        super._setupRole(role, account);\n        _roleMembers[role].add(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "src/Protocol/Protocol.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.7;\n\nimport {AccessControlEnumerable} from \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n/** The Protocol contract is used to look-up other Ren contracts. */\ncontract Protocol is AccessControlEnumerable {\n    event LogContractUpdated(string contractName, address indexed contractAddress, string indexed contractNameIndexed);\n\n    mapping(string => address) internal contractMap;\n\n    bytes32 public constant CAN_ADD_CONTRACTS = keccak256(\"CAN_ADD_CONTRACTS\");\n    bytes32 public constant CAN_UPDATE_CONTRACTS = keccak256(\"CAN_UPDATE_CONTRACTS\");\n\n    constructor(address adminAddress, address[] memory contractAdders) {\n        _setupRole(AccessControl.DEFAULT_ADMIN_ROLE, adminAddress);\n        _setupRole(CAN_ADD_CONTRACTS, adminAddress);\n        _setupRole(CAN_UPDATE_CONTRACTS, adminAddress);\n\n        for (uint256 i = 0; i < contractAdders.length; i++) {\n            _setupRole(CAN_ADD_CONTRACTS, contractAdders[i]);\n        }\n    }\n\n    function addContract(string memory contractName, address contractAddress) public onlyRole(CAN_ADD_CONTRACTS) {\n        require(contractMap[contractName] == address(0x0), \"Protocol: contract entry already exists\");\n        contractMap[contractName] = contractAddress;\n\n        emit LogContractUpdated(contractName, contractAddress, contractName);\n    }\n\n    function updateContract(string memory contractName, address contractAddress) public onlyRole(CAN_UPDATE_CONTRACTS) {\n        contractMap[contractName] = contractAddress;\n\n        emit LogContractUpdated(contractName, contractAddress, contractName);\n    }\n\n    function getContract(string memory contractName) public view returns (address) {\n        return contractMap[contractName];\n    }\n}\n"
    },
    "src/Bindings.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nimport \"./RenProxyAdmin.sol\";\nimport \"./RenAsset/ERC20WithPermit.sol\";\nimport \"./RenAsset/RenAsset.sol\";\n\nimport \"./Gateways/LockGateway.sol\";\nimport \"./Gateways/MintGateway.sol\";\nimport \"./Gateways/RenVMSignatureVerifier.sol\";\n\nimport \"./GatewayRegistry/ProxyBeacon.sol\";\nimport \"./GatewayRegistry/RenAssetFactory.sol\";\nimport \"./GatewayRegistry/GatewayRegistryV3.sol\";\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport {ERC20PresetMinterPauserUpgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol\";\n\n/// Bindings imports all of the contracts for generating bindings.\n/* solium-disable-next-line no-empty-blocks */\ncontract Bindings {\n\n}\n"
    },
    "src/RenProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ProxyAdmin} from \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\n\n/// See ProxyAdmin.\ncontract RenProxyAdmin is Ownable, ProxyAdmin {\n    string public constant NAME = \"RenProxyAdmin\";\n\n    /// An address to be set as the owner is passed in so that RenProxyAdmin can\n    /// be deployed by the CREATE2 deployer contract.\n    constructor(address initialOwner) {\n        transferOwnership(initialOwner);\n    }\n}\n"
    },
    "src/Gateways/LockGateway.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {ContextUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport {StringsUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\nimport {IERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport {SafeERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\nimport {SafeTransferWithFeesUpgradeable} from \"./common/SafeTransferWithFees.sol\";\nimport {GatewayStateV3, GatewayStateManagerV3} from \"./common/GatewayState.sol\";\nimport {RenVMHashes} from \"./common/RenVMHashes.sol\";\nimport {ILockGateway} from \"./interfaces/ILockGateway.sol\";\nimport {CORRECT_SIGNATURE_RETURN_VALUE_} from \"./RenVMSignatureVerifier.sol\";\nimport {RenAssetV2} from \"../RenAsset/RenAsset.sol\";\nimport {StringV1} from \"../libraries/StringV1.sol\";\n\n/// LockGatewayV3 handles verifying lock and release requests. A mint authority\n/// approves assets being released by providing a digital signature.\n/// The balance of assets is assumed not to change without a transfer, so\n/// rebasing assets and assets with a demurrage fee are not supported.\ncontract LockGatewayV3 is Initializable, ContextUpgradeable, GatewayStateV3, GatewayStateManagerV3, ILockGateway {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using SafeTransferWithFeesUpgradeable for IERC20Upgradeable;\n\n    string public constant NAME = \"LockGateway\";\n\n    // If these parameters are changed, RenAssetFactory must be updated as well.\n    function __LockGateway_init(\n        string calldata asset_,\n        address signatureVerifier_,\n        address token_\n    ) external initializer {\n        __Context_init();\n        __GatewayStateManager_init(asset_, signatureVerifier_, token_);\n    }\n\n    // Public functions ////////////////////////////////////////////////////////\n\n    /// @notice Transfers tokens into custody by this contract so that they\n    ///         can be minted on another chain.\n    ///\n    /// @param recipientAddress The address to which the locked assets will be\n    ///        minted to. The address should be a plain-text address, without\n    ///        decoding to bytes first.\n    /// @param recipientChain The target chain to which the assets are being\n    ///        moved to.\n    /// @param recipientPayload An optional payload to be passed to the\n    ///        recipient chain along with the address.\n    /// @param amount The amount of the token being locked, in the asset's\n    ///        smallest unit. (e.g. satoshis for BTC)\n    function lock(\n        string calldata recipientAddress,\n        string calldata recipientChain,\n        bytes calldata recipientPayload,\n        uint256 amount\n    ) external override returns (uint256) {\n        // The recipient must not be empty. Better validation is possible,\n        // but would need to be customized for each destination ledger.\n        require(StringV1.isNotEmpty(recipientAddress), \"LockGateway: to address is empty\");\n\n        // Lock the tokens. If the user doesn't have enough tokens, this will\n        // throw. Note that some assets may transfer less than the provided\n        // `amount`, due to transfer fees.\n        uint256 transferredAmount = IERC20Upgradeable(getToken()).safeTransferFromWithFees(\n            _msgSender(),\n            address(this),\n            amount\n        );\n\n        // Get the latest nonce (also known as lock reference).\n        uint256 lockNonce = getEventNonce();\n\n        emit LogLockToChain(\n            recipientAddress,\n            recipientChain,\n            recipientPayload,\n            transferredAmount,\n            lockNonce,\n            recipientAddress,\n            recipientChain\n        );\n\n        _eventNonce = lockNonce + 1;\n\n        return transferredAmount;\n    }\n\n    /// @notice release verifies a release approval signature from RenVM and\n    ///         transfers the asset out of custody and to the recipient.\n    ///\n    /// @param pHash (payload hash) The hash of the payload associated with the\n    ///        release.\n    /// @param amount The amount of the token being released, in its smallest\n    ///        value.\n    /// @param nHash (nonce hash) The hash of the nonce, amount and pHash.\n    /// @param sig The signature of the hash of the following values:\n    ///        (pHash, amount, recipient, nHash), signed by the mintAuthority.\n    function release(\n        bytes32 pHash,\n        uint256 amount,\n        bytes32 nHash,\n        bytes calldata sig\n    ) external override returns (uint256) {\n        // The recipient must match the value signed by RenVM.\n        address recipient = _msgSender();\n\n        // Calculate the hash signed by RenVM. This binds the payload hash,\n        // amount, recipient and nonce hash to the signature.\n        bytes32 sigHash = RenVMHashes.calculateSigHash(pHash, amount, getSelectorHash(), recipient, nHash);\n\n        // Check that the signature hasn't been redeemed.\n        require(!status(sigHash), \"LockGateway: signature already spent\");\n\n        // If the signature fails verification, throw an error.\n        // `isValidSignature` must return an exact bytes4 value, to avoid\n        // a contract mistakingly returning a truthy value without intending to.\n        if (getSignatureVerifier().isValidSignature(sigHash, sig) != CORRECT_SIGNATURE_RETURN_VALUE_) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"LockGateway: invalid signature. phash: \",\n                        StringsUpgradeable.toHexString(uint256(pHash), 32),\n                        \", amount: \",\n                        StringsUpgradeable.toString(amount),\n                        \", shash\",\n                        StringsUpgradeable.toHexString(uint256(getSelectorHash()), 32),\n                        \", msg.sender: \",\n                        StringsUpgradeable.toHexString(uint160(recipient), 20),\n                        \", nhash: \",\n                        StringsUpgradeable.toHexString(uint256(nHash), 32)\n                    )\n                )\n            );\n        }\n\n        // Update the status for both the signature hash and the nHash.\n        _status[sigHash] = true;\n\n        // Release the amount to the recipient.\n        IERC20Upgradeable(getToken()).safeTransfer(recipient, amount);\n\n        // Emit a log with a unique identifier 'n'.\n        emit LogRelease(recipient, amount, sigHash, nHash);\n\n        return amount;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../extensions/ERC20BurnableUpgradeable.sol\";\nimport \"../extensions/ERC20PausableUpgradeable.sol\";\nimport \"../../../access/AccessControlEnumerableUpgradeable.sol\";\nimport \"../../../utils/ContextUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n */\ncontract ERC20PresetMinterPauserUpgradeable is Initializable, ContextUpgradeable, AccessControlEnumerableUpgradeable, ERC20BurnableUpgradeable, ERC20PausableUpgradeable {\n    function initialize(string memory name, string memory symbol) public virtual initializer {\n        __ERC20PresetMinterPauser_init(name, symbol);\n    }\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * See {ERC20-constructor}.\n     */\n    function __ERC20PresetMinterPauser_init(string memory name, string memory symbol) internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __AccessControlEnumerable_init_unchained();\n        __ERC20_init_unchained(name, symbol);\n        __ERC20Burnable_init_unchained();\n        __Pausable_init_unchained();\n        __ERC20Pausable_init_unchained();\n        __ERC20PresetMinterPauser_init_unchained(name, symbol);\n    }\n\n    function __ERC20PresetMinterPauser_init_unchained(string memory name, string memory symbol) internal initializer {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20Upgradeable, ERC20PausableUpgradeable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        TransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "src/Gateways/common/SafeTransferWithFees.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n// solhint-disable-next-line\npragma solidity ^0.8.0;\n\nimport {IERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport {SafeERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport {MathUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeTransferWithFeesUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    function safeTransferFromWithFees(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal returns (uint256) {\n        uint256 balanceBefore = token.balanceOf(to);\n        token.safeTransferFrom(from, to, value);\n        uint256 balanceAfter = token.balanceOf(to);\n\n        // Overflow check added by Solidity compiler.\n        // The result is also only used if it's less than `value`.\n        uint256 balanceIncrease = balanceAfter - balanceBefore;\n\n        return MathUpgradeable.min(value, balanceIncrease);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/ContextUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\n    function __ERC20Burnable_init() internal initializer {\n        __Context_init_unchained();\n        __ERC20Burnable_init_unchained();\n    }\n\n    function __ERC20Burnable_init_unchained() internal initializer {\n    }\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../security/PausableUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20PausableUpgradeable is Initializable, ERC20Upgradeable, PausableUpgradeable {\n    function __ERC20Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n        __ERC20Pausable_init_unchained();\n    }\n\n    function __ERC20Pausable_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}