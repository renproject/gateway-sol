{
  "address": "0xc96DCC38c6df5191088C3E26e4848631cE8348a4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimNonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operatorAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "assetSymbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "recipientAddress",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "recipientChain",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "recipientPayload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fractionInBps",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "assetSymbolIndexed",
          "type": "string"
        }
      ],
      "name": "LogClaimRewards",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BPS_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__ClaimRewards_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "assetSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "recipientAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "recipientChain",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "recipientPayload",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "fractionInBps",
          "type": "uint256"
        }
      ],
      "name": "claimRewardsToChain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "assetSymbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "recipientAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fractionInBps",
          "type": "uint256"
        }
      ],
      "name": "claimRewardsToEthereum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextClaimNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "57c09a9e98e7af5ed2dbddd1b25c1b24",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"assetSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recipientAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recipientChain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"recipientPayload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fractionInBps\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"assetSymbolIndexed\",\"type\":\"string\"}],\"name\":\"LogClaimRewards\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__ClaimRewards_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"assetSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recipientAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recipientChain\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"recipientPayload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fractionInBps\",\"type\":\"uint256\"}],\"name\":\"claimRewardsToChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"assetSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fractionInBps\",\"type\":\"uint256\"}],\"name\":\"claimRewardsToEthereum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextClaimNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimRewardsToChain(string,string,string,bytes,uint256)\":{\"params\":{\"assetSymbol\":\"The token symbol being claimed (e.g. \\\"BTC\\\", \\\"DOGE\\\" or        \\\"FIL\\\").\",\"fractionInBps\":\"A value between 0 and 10000 (inclusive) that        indicates the percent to withdraw from each of the operator's        darknodes. The value should be in BPS (e.g. 10000 represents 100%,        and 5000 represents 50%).\",\"recipientAddress\":\"An address on the asset's native chain, for        receiving the withdrawn rewards. This should be a string as        provided by the user - no encoding or decoding required.        E.g.: \\\"miMi2VET41YV1j6SDNTeZoPBbmH8B4nEx6\\\" for BTC.\",\"recipientChain\":\"A string indicating which chain the rewards should        be withdrawn to. It should be the name of the chain as expected by        RenVM (e.g. \\\"Ethereum\\\" or \\\"Solana\\\"). Support for different chains        will be rolled out after this contract is deployed, starting with        \\\"Ethereum\\\", then other host chains (e.g. \\\"Polygon\\\" or \\\"Solana\\\")        and then lock chains (e.g. \\\"Bitcoin\\\" for \\\"BTC\\\"), also represented        by an empty string \\\"\\\".\",\"recipientPayload\":\"An associated payload that can be provided along        with the recipient chain and address. Should be empty if not        required.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRewardsToChain(string,string,string,bytes,uint256)\":{\"notice\":\"claimRewardsToChain allows darknode operators to withdraw darknode earnings, as an on-chain alternative to the JSON-RPC claim method. It will the operators total sum of rewards, for all of their nodes.\"},\"claimRewardsToEthereum(string,address,uint256)\":{\"notice\":\"`claimRewardsToEthereum` calls `claimRewardsToChain` internally, converting the recipientAddress to a string and providing an empty payload.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Protocol/ClaimRewards.sol\":\"ClaimRewardsV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xca2eb23a188f213d914fad982985d07e491dbc9960a387d4469bfce5c48911b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcbccf806d646bd9e2594650917208245d45998b887d5fc914de424247f5f9f9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x8ddea9f930f26e588ea606f44c90d2623560c908e38614a03a4ca78aea8f9202\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0x2bf89a0dae89f861c5e8013478e650e918d98d376e75393867ccec88b0bf2b90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d15d280d1f868f59a8264dc73f7ea8c51f10d78aac864b2f2ad29412d187ff5\",\"license\":\"MIT\"},\"src/Protocol/ClaimRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport {TransparentUpgradeableProxy} from \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\nimport {StringV1} from \\\"../libraries/StringV1.sol\\\";\\nimport {IClaimRewards} from \\\"./IClaimRewards.sol\\\";\\n\\ncontract ClaimRewardsStateV1 {\\n    uint256 internal _nextClaimNonce;\\n\\n    uint256[49] private __gap;\\n}\\n\\ncontract ClaimRewardsV1 is Initializable, ClaimRewardsStateV1, IClaimRewards {\\n    uint256 public constant BPS_DENOMINATOR = 10000;\\n\\n    event LogClaimRewards(\\n        uint256 indexed claimNonce,\\n        address indexed operatorAddress,\\n        string assetSymbol,\\n        string recipientAddress,\\n        string recipientChain,\\n        bytes recipientPayload,\\n        uint256 fractionInBps,\\n        // Repeated values for indexing.\\n        string indexed assetSymbolIndexed\\n    );\\n\\n    function __ClaimRewards_init() public initializer {}\\n\\n    function getNextClaimNonce() public view returns (uint256) {\\n        return _nextClaimNonce;\\n    }\\n\\n    /**\\n     * claimRewardsToChain allows darknode operators to withdraw darknode\\n     * earnings, as an on-chain alternative to the JSON-RPC claim method.\\n     *\\n     * It will the operators total sum of rewards, for all of their nodes.\\n     *\\n     * @param assetSymbol The token symbol being claimed (e.g. \\\"BTC\\\", \\\"DOGE\\\" or\\n     *        \\\"FIL\\\").\\n     * @param recipientAddress An address on the asset's native chain, for\\n     *        receiving the withdrawn rewards. This should be a string as\\n     *        provided by the user - no encoding or decoding required.\\n     *        E.g.: \\\"miMi2VET41YV1j6SDNTeZoPBbmH8B4nEx6\\\" for BTC.\\n     * @param recipientChain A string indicating which chain the rewards should\\n     *        be withdrawn to. It should be the name of the chain as expected by\\n     *        RenVM (e.g. \\\"Ethereum\\\" or \\\"Solana\\\"). Support for different chains\\n     *        will be rolled out after this contract is deployed, starting with\\n     *        \\\"Ethereum\\\", then other host chains (e.g. \\\"Polygon\\\" or \\\"Solana\\\")\\n     *        and then lock chains (e.g. \\\"Bitcoin\\\" for \\\"BTC\\\"), also represented\\n     *        by an empty string \\\"\\\".\\n     * @param recipientPayload An associated payload that can be provided along\\n     *        with the recipient chain and address. Should be empty if not\\n     *        required.\\n     * @param fractionInBps A value between 0 and 10000 (inclusive) that\\n     *        indicates the percent to withdraw from each of the operator's\\n     *        darknodes. The value should be in BPS (e.g. 10000 represents 100%,\\n     *        and 5000 represents 50%).\\n     */\\n    function claimRewardsToChain(\\n        string memory assetSymbol,\\n        string memory recipientAddress,\\n        string memory recipientChain,\\n        bytes memory recipientPayload,\\n        uint256 fractionInBps\\n    ) public returns (uint256) {\\n        // Validate asset symbol.\\n        require(StringV1.isNotEmpty(assetSymbol), \\\"ClaimRewards: invalid empty asset\\\");\\n        require(StringV1.isAlphanumeric(assetSymbol), \\\"ClaimRewards: invalid asset\\\");\\n\\n        // Validate recipient address.\\n        require(StringV1.isNotEmpty(recipientAddress), \\\"ClaimRewards: invalid empty recipient address\\\");\\n        require(StringV1.isAlphanumeric(recipientAddress), \\\"ClaimRewards: invalid recipient address\\\");\\n\\n        // Validate recipient chain.\\n        // Note that the chain can be empty - which is planned to represent the\\n        // asset's native lock chain.\\n        require(StringV1.isAlphanumeric(recipientChain), \\\"ClaimRewards: invalid recipient chain\\\");\\n\\n        // Validate the fraction being withdrawn.\\n        require(fractionInBps <= BPS_DENOMINATOR, \\\"ClaimRewards: invalid fraction value greater than 10000\\\");\\n\\n        address operatorAddress = msg.sender;\\n\\n        uint256 nonce = getNextClaimNonce();\\n        _nextClaimNonce = nonce + 1;\\n\\n        // Emit event.\\n        emit LogClaimRewards(\\n            nonce,\\n            operatorAddress,\\n            assetSymbol,\\n            recipientAddress,\\n            recipientChain,\\n            recipientPayload,\\n            fractionInBps,\\n            // Indexed\\n            assetSymbol\\n        );\\n\\n        return nonce;\\n    }\\n\\n    /**\\n     * `claimRewardsToEthereum` calls `claimRewardsToChain` internally,\\n     * converting the recipientAddress to a string and providing an empty\\n     * payload.\\n     */\\n    function claimRewardsToEthereum(\\n        string memory assetSymbol,\\n        address recipientAddress,\\n        uint256 fractionInBps\\n    ) public override returns (uint256) {\\n        return\\n            claimRewardsToChain(\\n                assetSymbol,\\n                StringsUpgradeable.toHexString(uint160(recipientAddress), 20),\\n                \\\"Ethereum\\\",\\n                \\\"\\\",\\n                fractionInBps\\n            );\\n    }\\n}\\n\\ncontract ClaimRewardsProxy is TransparentUpgradeableProxy {\\n    constructor(\\n        address logic,\\n        address admin,\\n        bytes memory data\\n    ) TransparentUpgradeableProxy(logic, admin, data) {}\\n}\\n\",\"keccak256\":\"0x2758798f6aef5d4d4fa09adf8e42b6338badb439fa0d6ea736e02167d20d7464\",\"license\":\"GPL-3.0\"},\"src/Protocol/IClaimRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\ninterface IClaimRewards {\\n    /**\\n     * `claimRewardsToEthereum` triggers a withdrawal of a darknode operator's\\n     * rewards. `claimRewardsToEthereum` must be called by the operator\\n     * performing the withdrawals. When RenVM sees the claim, it will produce a\\n     * signature which needs to be submitted to the asset's Ren Gateway contract\\n     * on Ethereum.\\n     *\\n     * @param assetSymbol The token symbol being claimed (e.g. \\\"BTC\\\", \\\"DOGE\\\" or\\n     *        \\\"FIL\\\").\\n     * @param recipientAddress The Ethereum address to which the assets are\\n     *        being withdrawn to.\\n     * @param fractionInBps A value between 0 and 10000 (inclusive) that\\n     *        indicates the percent to withdraw from each of the operator's\\n     *        darknodes. The value should be in BPS (e.g. 10000 represents 100%,\\n     *        and 5000 represents 50%).\\n     */\\n    function claimRewardsToEthereum(\\n        string memory assetSymbol,\\n        address recipientAddress,\\n        uint256 fractionInBps\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x698a2df6d96611288f35d3dadeaf46418600f0be3f98d8a0192aa22c764134f2\",\"license\":\"GPL-3.0\"},\"src/libraries/StringV1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// solhint-disable-next-line\\npragma solidity ^0.8.0;\\n\\n/// Updates String.isAlphanumeric to allow underscores.\\nlibrary StringV1 {\\n    /// Check that the string only contains alphanumeric characters (and\\n    /// underscores), to avoid UTF-8 characters that are indistinguishable from\\n    /// alphanumeric characters.\\n    function isAlphanumeric(string memory str) internal pure returns (bool) {\\n        for (uint256 i = 0; i < bytes(str).length; i++) {\\n            uint8 char = uint8(bytes(str)[i]);\\n            if (\\n                !((char >= 65 && char <= 90) || (char >= 97 && char <= 122) || (char >= 48 && char <= 57) || char == 95)\\n            ) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// Check that the string has at least one character.\\n    function isNotEmpty(string memory str) internal pure returns (bool) {\\n        return bytes(str).length > 0;\\n    }\\n\\n    /// Check that the string is not empty and only has alphanumeric characters.\\n    function isValidString(string memory str) internal pure returns (bool) {\\n        return isNotEmpty(str) && isAlphanumeric(str);\\n    }\\n}\\n\",\"keccak256\":\"0xa8c62d8c4de5911771ce606eb3514697900592e9abec5c3ecabea633d46946df\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a77806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063766256fa1461005c578063a430147f14610066578063aaf5689d1461008b578063ad42bdb014610093578063e1a45218146100a6575b600080fd5b6100646100af565b005b61007961007436600461078f565b610167565b60405190815260200160405180910390f35b600154610079565b6100796100a13660046107f5565b6101c0565b61007961271081565b600054610100900460ff16806100c8575060005460ff16155b6101305760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff16158015610152576000805461ffff19166101011790555b8015610164576000805461ff00191690555b50565b60006101b884610181856001600160a01b031660146104a2565b60405180604001604052806008815260200167457468657265756d60c01b81525060405180602001604052806000815250866101c0565b949350505050565b60006101cc8651151590565b6102225760405162461bcd60e51b815260206004820152602160248201527f436c61696d526577617264733a20696e76616c696420656d70747920617373656044820152601d60fa1b6064820152608401610127565b61022b86610645565b6102775760405162461bcd60e51b815260206004820152601b60248201527f436c61696d526577617264733a20696e76616c696420617373657400000000006044820152606401610127565b84516102db5760405162461bcd60e51b815260206004820152602d60248201527f436c61696d526577617264733a20696e76616c696420656d707479207265636960448201526c7069656e74206164647265737360981b6064820152608401610127565b6102e485610645565b6103405760405162461bcd60e51b815260206004820152602760248201527f436c61696d526577617264733a20696e76616c696420726563697069656e74206044820152666164647265737360c81b6064820152608401610127565b61034984610645565b6103a35760405162461bcd60e51b815260206004820152602560248201527f436c61696d526577617264733a20696e76616c696420726563697069656e742060448201526431b430b4b760d91b6064820152608401610127565b61271082111561041b5760405162461bcd60e51b815260206004820152603760248201527f436c61696d526577617264733a20696e76616c6964206672616374696f6e207660448201527f616c75652067726561746572207468616e2031303030300000000000000000006064820152608401610127565b33600061042760015490565b9050610434816001610966565b6001556040516104459089906108ea565b6040518091039020826001600160a01b0316827f508f7982abcc6a04638da6bf7685b4cbd566873be211123554e5b7a69fc519ef8b8b8b8b8b60405161048f959493929190610906565b60405180910390a4979650505050505050565b606060006104b183600261097e565b6104bc906002610966565b67ffffffffffffffff8111156104d4576104d4610a2b565b6040519080825280601f01601f1916602001820160405280156104fe576020820181803683370190505b509050600360fc1b8160008151811061051957610519610a15565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061054857610548610a15565b60200101906001600160f81b031916908160001a905350600061056c84600261097e565b610577906001610966565b90505b60018111156105ef576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106105ab576105ab610a15565b1a60f81b8282815181106105c1576105c1610a15565b60200101906001600160f81b031916908160001a90535060049490941c936105e8816109cd565b905061057a565b50831561063e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610127565b9392505050565b6000805b82518110156106f057600083828151811061066657610666610a15565b016020015160f81c9050604181108015906106855750605a8160ff1611155b806106a3575060618160ff16101580156106a35750607a8160ff1611155b806106c1575060308160ff16101580156106c1575060398160ff1611155b806106cf57508060ff16605f145b6106dd575060009392505050565b50806106e8816109e4565b915050610649565b50600192915050565b600067ffffffffffffffff8084111561071457610714610a2b565b604051601f8501601f19908116603f0116810190828211818310171561073c5761073c610a2b565b8160405280935085815286868601111561075557600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261078057600080fd5b61063e838335602085016106f9565b6000806000606084860312156107a457600080fd5b833567ffffffffffffffff8111156107bb57600080fd5b6107c78682870161076f565b93505060208401356001600160a01b03811681146107e457600080fd5b929592945050506040919091013590565b600080600080600060a0868803121561080d57600080fd5b853567ffffffffffffffff8082111561082557600080fd5b61083189838a0161076f565b9650602088013591508082111561084757600080fd5b61085389838a0161076f565b9550604088013591508082111561086957600080fd5b61087589838a0161076f565b9450606088013591508082111561088b57600080fd5b508601601f8101881361089d57600080fd5b6108ac888235602084016106f9565b95989497509295608001359392505050565b600081518084526108d681602086016020860161099d565b601f01601f19169290920160200192915050565b600082516108fc81846020870161099d565b9190910192915050565b60a08152600061091960a08301886108be565b828103602084015261092b81886108be565b9050828103604084015261093f81876108be565b9050828103606084015261095381866108be565b9150508260808301529695505050505050565b60008219821115610979576109796109ff565b500190565b6000816000190483118215151615610998576109986109ff565b500290565b60005b838110156109b85781810151838201526020016109a0565b838111156109c7576000848401525b50505050565b6000816109dc576109dc6109ff565b506000190190565b60006000198214156109f8576109f86109ff565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212202c637dce7b6f93de810918f99c081f5a46d8e21dac74f56657d4b252f76bc5b064736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063766256fa1461005c578063a430147f14610066578063aaf5689d1461008b578063ad42bdb014610093578063e1a45218146100a6575b600080fd5b6100646100af565b005b61007961007436600461078f565b610167565b60405190815260200160405180910390f35b600154610079565b6100796100a13660046107f5565b6101c0565b61007961271081565b600054610100900460ff16806100c8575060005460ff16155b6101305760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff16158015610152576000805461ffff19166101011790555b8015610164576000805461ff00191690555b50565b60006101b884610181856001600160a01b031660146104a2565b60405180604001604052806008815260200167457468657265756d60c01b81525060405180602001604052806000815250866101c0565b949350505050565b60006101cc8651151590565b6102225760405162461bcd60e51b815260206004820152602160248201527f436c61696d526577617264733a20696e76616c696420656d70747920617373656044820152601d60fa1b6064820152608401610127565b61022b86610645565b6102775760405162461bcd60e51b815260206004820152601b60248201527f436c61696d526577617264733a20696e76616c696420617373657400000000006044820152606401610127565b84516102db5760405162461bcd60e51b815260206004820152602d60248201527f436c61696d526577617264733a20696e76616c696420656d707479207265636960448201526c7069656e74206164647265737360981b6064820152608401610127565b6102e485610645565b6103405760405162461bcd60e51b815260206004820152602760248201527f436c61696d526577617264733a20696e76616c696420726563697069656e74206044820152666164647265737360c81b6064820152608401610127565b61034984610645565b6103a35760405162461bcd60e51b815260206004820152602560248201527f436c61696d526577617264733a20696e76616c696420726563697069656e742060448201526431b430b4b760d91b6064820152608401610127565b61271082111561041b5760405162461bcd60e51b815260206004820152603760248201527f436c61696d526577617264733a20696e76616c6964206672616374696f6e207660448201527f616c75652067726561746572207468616e2031303030300000000000000000006064820152608401610127565b33600061042760015490565b9050610434816001610966565b6001556040516104459089906108ea565b6040518091039020826001600160a01b0316827f508f7982abcc6a04638da6bf7685b4cbd566873be211123554e5b7a69fc519ef8b8b8b8b8b60405161048f959493929190610906565b60405180910390a4979650505050505050565b606060006104b183600261097e565b6104bc906002610966565b67ffffffffffffffff8111156104d4576104d4610a2b565b6040519080825280601f01601f1916602001820160405280156104fe576020820181803683370190505b509050600360fc1b8160008151811061051957610519610a15565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061054857610548610a15565b60200101906001600160f81b031916908160001a905350600061056c84600261097e565b610577906001610966565b90505b60018111156105ef576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106105ab576105ab610a15565b1a60f81b8282815181106105c1576105c1610a15565b60200101906001600160f81b031916908160001a90535060049490941c936105e8816109cd565b905061057a565b50831561063e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610127565b9392505050565b6000805b82518110156106f057600083828151811061066657610666610a15565b016020015160f81c9050604181108015906106855750605a8160ff1611155b806106a3575060618160ff16101580156106a35750607a8160ff1611155b806106c1575060308160ff16101580156106c1575060398160ff1611155b806106cf57508060ff16605f145b6106dd575060009392505050565b50806106e8816109e4565b915050610649565b50600192915050565b600067ffffffffffffffff8084111561071457610714610a2b565b604051601f8501601f19908116603f0116810190828211818310171561073c5761073c610a2b565b8160405280935085815286868601111561075557600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261078057600080fd5b61063e838335602085016106f9565b6000806000606084860312156107a457600080fd5b833567ffffffffffffffff8111156107bb57600080fd5b6107c78682870161076f565b93505060208401356001600160a01b03811681146107e457600080fd5b929592945050506040919091013590565b600080600080600060a0868803121561080d57600080fd5b853567ffffffffffffffff8082111561082557600080fd5b61083189838a0161076f565b9650602088013591508082111561084757600080fd5b61085389838a0161076f565b9550604088013591508082111561086957600080fd5b61087589838a0161076f565b9450606088013591508082111561088b57600080fd5b508601601f8101881361089d57600080fd5b6108ac888235602084016106f9565b95989497509295608001359392505050565b600081518084526108d681602086016020860161099d565b601f01601f19169290920160200192915050565b600082516108fc81846020870161099d565b9190910192915050565b60a08152600061091960a08301886108be565b828103602084015261092b81886108be565b9050828103604084015261093f81876108be565b9050828103606084015261095381866108be565b9150508260808301529695505050505050565b60008219821115610979576109796109ff565b500190565b6000816000190483118215151615610998576109986109ff565b500290565b60005b838110156109b85781810151838201526020016109a0565b838111156109c7576000848401525b50505050565b6000816109dc576109dc6109ff565b506000190190565b60006000198214156109f8576109f86109ff565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212202c637dce7b6f93de810918f99c081f5a46d8e21dac74f56657d4b252f76bc5b064736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimRewardsToChain(string,string,string,bytes,uint256)": {
        "params": {
          "assetSymbol": "The token symbol being claimed (e.g. \"BTC\", \"DOGE\" or        \"FIL\").",
          "fractionInBps": "A value between 0 and 10000 (inclusive) that        indicates the percent to withdraw from each of the operator's        darknodes. The value should be in BPS (e.g. 10000 represents 100%,        and 5000 represents 50%).",
          "recipientAddress": "An address on the asset's native chain, for        receiving the withdrawn rewards. This should be a string as        provided by the user - no encoding or decoding required.        E.g.: \"miMi2VET41YV1j6SDNTeZoPBbmH8B4nEx6\" for BTC.",
          "recipientChain": "A string indicating which chain the rewards should        be withdrawn to. It should be the name of the chain as expected by        RenVM (e.g. \"Ethereum\" or \"Solana\"). Support for different chains        will be rolled out after this contract is deployed, starting with        \"Ethereum\", then other host chains (e.g. \"Polygon\" or \"Solana\")        and then lock chains (e.g. \"Bitcoin\" for \"BTC\"), also represented        by an empty string \"\".",
          "recipientPayload": "An associated payload that can be provided along        with the recipient chain and address. Should be empty if not        required."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimRewardsToChain(string,string,string,bytes,uint256)": {
        "notice": "claimRewardsToChain allows darknode operators to withdraw darknode earnings, as an on-chain alternative to the JSON-RPC claim method. It will the operators total sum of rewards, for all of their nodes."
      },
      "claimRewardsToEthereum(string,address,uint256)": {
        "notice": "`claimRewardsToEthereum` calls `claimRewardsToChain` internally, converting the recipientAddress to a string and providing an empty payload."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 773,
        "contract": "src/Protocol/ClaimRewards.sol:ClaimRewardsV1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 776,
        "contract": "src/Protocol/ClaimRewards.sol:ClaimRewardsV1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 13252,
        "contract": "src/Protocol/ClaimRewards.sol:ClaimRewardsV1",
        "label": "_nextClaimNonce",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 13256,
        "contract": "src/Protocol/ClaimRewards.sol:ClaimRewardsV1",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}